name: Lint OpenAPI specs

on:
  workflow_call:
    inputs:
      spec:
        description: "OpenAPI specs to lint, as a glob pattern."
        type: string
        default: "specs/*.json"
      artifact:
        description: "OpenAPI specs to lint, as a Github artifact glob pattern."
        type: string
      artifact_contents:
        description: "Glob pattern inside artifacts to include in linting, only used if artifact is provided."
        type: string
        default: "*"
      upload_to_bucket:
        description: "If true, will upload the spec(s) to a GCS bucket for analytics."
        type: boolean
        default: true
      fail_threshold:
        description: "The threshold to fail the build. Accepted values: warn, error, never"
        type: string
        default: "never"

jobs:
  validate-input:
    name: Validate input
    runs-on: ubuntu-latest
    steps:
      - name: Validate inputs
        run: |
          # Ensure not both inputs are empty.
          if [ -z "${{ inputs.artifact }}" ] && [ -z "${{ inputs.spec }}" ]; then            
            echo "Error: Exactly one of spec OR artifact is required."
            exit 1
          fi          

          # Ensure not both inputs are provided.
          if [ -n "${{ inputs.artifact }}" ] && [ -n "${{ inputs.spec }}" ] && [ "${{ inputs.spec }}" != "specs/*.json" ]; then            
            echo "Error: Both spec and artifact were provided. Please provide only one."
            exit 1
          fi

          # Validate fail_threshold
          case "${{ inputs.fail_threshold }}" in
            warn|error|never) 
              ;;  # OK
            *) 
              echo "Error: fail_threshold must be one of: warn, error, never"
              exit 1
              ;;
          esac
  lint:
    name: OpenAPI Lint
    runs-on: ubuntu-latest
    needs: validate-input
    if: ${{ github.actor != 'dependabot[bot]' }}
    permissions:
      contents: read
    steps:
      - name: Checkout repository (if spec provided)
        if: ${{ inputs.artifact == '' }}
        uses: actions/checkout@v4
      - name: Download artifact (if artifact provided)
        if: ${{ inputs.artifact != '' }}
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ inputs.artifact }}
          path: /tmp/artifacts
          merge-multiple: true #Downloads all artifacts into /tmp/artifacts, without subdirectories
      - name: Checkout guidelines
        uses: actions/checkout@v4
        with:
          repository: entur/api-guidelines
          ref: v1.0.1
          path: rulesets
          sparse-checkout: |
            .spectral.yml
      - name: Install Spectral
        run: npm install -g @stoplight/spectral-cli
      - name: Lint OpenAPI
        shell: bash
        run: |
          shopt -s globstar

          if [ -n "${{ inputs.artifact }}" ]; then
            spec_glob="/tmp/artifacts/${{ inputs.artifact_contents }}"
          else
            spec_glob="${{ inputs.spec }}"
          fi          

          #This is needed, because calling spectral with a glob that does not match any files will succeed, which is not what we want.
          if ! compgen -G $spec_glob > /dev/null; then
            echo "No file matches '$spec_glob'"
            exit 1
          fi            

          tmp=$(mktemp)
          #Instead of using -f markdown, we use json. This is because the markdown format results in warnings being omitted. 
          spectral lint "$spec_glob" --ruleset rulesets/.spectral.yml -f json -o "$tmp" || true

          #All issues          
          total_count=$(jq 'length // 0' "$tmp")
          #Error issues
          error_count=$(jq '[.[] | select(.severity == 0)] | length' "$tmp")
          warning_count=$(jq '[.[] | select(.severity == 1)] | length' "$tmp")

          #) Get workspace root so we can strip it
          ws="${GITHUB_WORKSPACE%/}"          

          if [ "$total_count" -gt 0 ]; then
            {
              # ─── HEADER ────────────────────────────────────────────────────────
              echo '| Code | Path | Message | Severity | Start | End  | Source |'
              echo '| ---- | ---- | ------- | -------- | ----- | ---- | ------ |'

              # ─── ROWS ──────────────────────────────────────────────────────────
              jq -r --arg ws "$ws/" '
                .[] |
                (if .severity == 0 then "Error"
                 elif .severity == 1 then "Warn"
                 elif .severity == 2 then "Info"
                 elif .severity == 3 then "Hint"
                 else (.severity|tostring) end) as $sev |
                # collapse JSON-path array into dot-path
                (.path | join(".")) as $jsonPath |
                # build start/end as “line:char”
                "\(.range.start.line):\(.range.start.character)" as $start |
                "\(.range.end.line):\(.range.end.character)"   as $end |
                # strip the workspace prefix from source
                (.source | sub("^"+$ws; "")) as $src |
                # emit the table row
                "| \(.code) | \($jsonPath) | \(.message) | \($sev) | \($start) | \($end) | \($src) |"
              ' "$tmp"
              } >> "$GITHUB_STEP_SUMMARY"
            else
              echo "No issues found." >> "$GITHUB_STEP_SUMMARY"
            fi
                        
            if [ "$error_count" -gt 0 ] && [ "${{ inputs.fail_threshold }}" != "never" ]; then
              echo "❌ Found linting errors. Failing workflow." >&2
              exit 1
            fi                       

            if [ "$warning_count" -gt 0 ] && [ "${{ inputs.fail_threshold }}" = "warn" ]; then
              echo "❌ Found linting warnings. Failing workflow." >&2
              exit 1
            fi

  upload-to-bucket:
    name: Upload to bucket
    if: |
      inputs.upload_to_bucket == true && (
        (github.event_name == 'push' && github.ref_name == github.event.repository.default_branch) ||
        (github.event_name == 'pull_request' && 
         github.event.action == 'closed' && 
         github.event.pull_request.merged == true && 
         github.event.pull_request.base.ref == github.event.repository.default_branch)
      )
    continue-on-error: true
    needs: validate-input
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository (if spec provided)
        if: ${{ inputs.artifact == '' }}
        uses: actions/checkout@v4
      - name: Download artifact (if artifact provided)
        if: ${{ inputs.artifact != '' }}
        uses: actions/download-artifact@v4
        with:
          pattern: ${{ inputs.artifact }}
          path: /tmp/artifacts
          merge-multiple: true
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.ENTUR_API_DATA_SA }}"
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      - name: Copy specs to temporary directory
        run: |
          shopt -s globstar

          mkdir -p /tmp/specs

          if [ -z "${{ inputs.artifact }}" ]; then            
            cp ${{ inputs.spec }} /tmp/specs
          else
            #Since gcloud storage rsync does not support GLOB, copy files matching artifact_contents to /tmp/specs for upload 
            cp /tmp/artifacts/${{ inputs.artifact_contents }} /tmp/specs
          fi
      - name: Upload specs to GCS
        run: |
          echo "Starting to sync files in /tmp/specs/ to GCS Bucket to path /${GITHUB_REPOSITORY#*/}"
          gcloud storage rsync /tmp/specs/ "gs://ent-gcs-api-specs-prd-001/${GITHUB_REPOSITORY#*/}"
