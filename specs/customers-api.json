{
  "openapi": "3.0.1",
  "info": {
    "title": "Customers API",
    "description": "Documentation of the Customers API",
    "termsOfService": "https://entur.org",
    "contact": {
      "name": "Entur Team Personalisering",
      "url": "https://enturas.atlassian.net/wiki/spaces/CULP/overview",
      "email": "team.personalisering@entur.org"
    },
    "version": "5.2.0"
  },
  "servers": [{ "url": "https://api.entur.io/customers/v2" }],
  "security": [{ "jwt": [] }],
  "tags": [
    { "name": "Deprecated", "description": "Endpoints deprecated in v2" },
    {
      "name": "Preferences admin",
      "description": "Api for creating, fetching, modifying and deleting preferences a customer can have"
    },
    {
      "name": "Temporary profiles client",
      "description": "Api for creating, fetching, modifying and deleting temporary customer profiles. "
    },
    {
      "name": "Authentication admin",
      "description": "Api for verify credentials, generate and update password."
    },
    {
      "name": "Profiles client",
      "description": "Api for creating, fetching, modifying and deleting customers and related information."
    },
    {
      "name": "Customer accounts client",
      "description": "Api for creating, fetching and modifying customers account ids."
    },
    {
      "name": "Gift cards client",
      "description": "Endpoints for creating, managing and using gift cards on legacy platform"
    },
    {
      "name": "Loyalty program reports",
      "description": "Endpoints to get loyalty program reports"
    },
    {
      "name": "Contract usage admin",
      "description": "Endpoints for creating order line events directly on a contract."
    },
    {
      "name": "Contracts admin",
      "description": "Api for administration of contracts"
    },
    {
      "name": "pdf-controller",
      "description": "Api to generate benefits pdfs"
    },
    {
      "name": "Contracts client",
      "description": "Loyalty program contracts for customers"
    },
    {
      "name": "Fraud prevention",
      "description": "Endpoints for blocking and unblocking customers from all contracts."
    },
    {
      "name": "Loyalty programs admin",
      "description": "Api for administration of loyalty programs"
    },
    {
      "name": "Contract transactions admin",
      "description": "Endpoints for creating, managing and using gift cards and other point based loyalty programs."
    },
    {
      "name": "Consents DWH",
      "description": "API for displaying all consent info (Data warehouse API)"
    },
    {
      "name": "Consents admin",
      "description": "Api for creating, fetching, modifying and deleting consents and related information by admins"
    },
    {
      "name": "Consents client",
      "description": "Api for fetching consents and related information by clients"
    },
    {
      "name": "Given consents client",
      "description": "Api for creating, fetching, modifying and deleting given consents by clients"
    },
    {
      "name": "Entitlements",
      "description": "API for handling loyalty program entitlements."
    },
    {
      "name": "Traveller information",
      "description": "API for retrieving contact info for all travellers on a given journey. Given a serviceJourneyId or, preferably, an originalServiceJourneyId, returns contact info for the travellers on this journey"
    },
    {
      "name": "Authentication client",
      "description": "Api for handling authentication."
    }
  ],
  "paths": {
    "/profiles/{organisationId}/{email}/generate-password": {
      "put": {
        "tags": ["Authentication admin"],
        "summary": "Generate password",
        "description": "Generates a new password for a customer identified by organisationId (numeric) and email address. This endpoint requires an Internal or Partner jwt-token.",
        "operationId": "generatePassword",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "email",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratePasswordResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find customer by customer number",
        "description": "Gets a customer with related information. If the passed customer number is for a merged and passive customer, the result will instead be the active, merged customer. Thus, you may find a customer with a different customer number than you specified in the URL.",
        "operationId": "findCustomerByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeECards",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includePersonnelTicket",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsents",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includePreferences",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeNotes",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Profiles client"],
        "summary": "Update customer",
        "description": "Updates a customer with the added data. If an address is not specified in the request, it will not be changed. After the update is complete, an UPDATE event will be added to the customer-changes queue.",
        "operationId": "updateCustomerByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CustomerPutRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/set-password": {
      "put": {
        "tags": ["Authentication admin"],
        "summary": "Set password",
        "description": "Set the password for the specified customer. This endpoint requires an Internal or Partner jwt-token.",
        "operationId": "setPassword",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/NewPasswordRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/restore": {
      "put": {
        "tags": ["Profiles client"],
        "summary": "Restore deactivated customer",
        "description": "Restores a deactivated customer. This means reinstating the status it had before deletion. If another customer has been registered for the same organisation with the same email address since marking for deactivation, the restoration will fail.",
        "operationId": "restoreDeactivatedCustomerByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/preferences": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find all preferences for customer",
        "description": "Get all customer preferences for the given customer number.",
        "operationId": "findAllPreferencesForCustomerByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "object" } }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Profiles client"],
        "summary": "Bulk update customer preferences",
        "description": "Replaces all a customers preferences with the supplied list. All existing preferences will be deleted! Use with caution.",
        "operationId": "bulkUpdateCustomerPreferencesByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListCustomerPreferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCustomerPreferenceResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Profiles client"],
        "summary": "Create customer preference",
        "description": "Create a new customer preference. This will fail if the customer already has that preference set.",
        "operationId": "createCustomerPreferenceByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPreferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPreferenceResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/preferences/{preferenceId}": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find a specific preference for customer",
        "description": "Get a specific customer preference by preference Id.",
        "operationId": "findSpecificPreferenceForCustomerByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "preferenceId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPreferenceResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Profiles client"],
        "summary": "Update a customer preference",
        "description": "Set a new value for a given customer preference. This will fail if the customer doesn't have this preference set already.",
        "operationId": "updateCustomerPreferenceByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "preferenceId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerPreferenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerPreferenceResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Profiles client"],
        "summary": "Delete a customer preference",
        "description": "Deletes the given customer preference from the database.",
        "operationId": "deleteCustomerPreferenceByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "preferenceId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "204": { "description": "No Content" }
        }
      }
    },
    "/profiles/{customerNumber}/postal-addresses/{postalAddressId}": {
      "put": {
        "tags": ["Profiles client"],
        "summary": "Update postal address",
        "description": "Updates an existing postal address on the customer.",
        "operationId": "updatePostalAddressByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "postalAddressId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PostalAddressRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostalAddressResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Profiles client"],
        "summary": "Delete postal address",
        "description": "Deletes the given postal address from the customer.",
        "operationId": "deletePostalAddressByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "postalAddressId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "204": { "description": "No Content" }
        }
      }
    },
    "/profiles/{customerNumber}/merge-personnel-ticket-profile/{pticketCustomerNumber}": {
      "put": {
        "tags": ["Profiles client"],
        "summary": "Merge customers",
        "description": "Merge a personnel ticket customer with a standard customer. Given the customer number to a profile that has been created solely for being the recipient of a personnel ticket, you can merge that profile into an active profile. In practice this deletes the personnel ticket profile and transfers any tickets onto the current profile.",
        "operationId": "mergeCustomersByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "pticketCustomerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/ecard-ownerships/{ecardOperator}/{ecardNumber}": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find specific E-card",
        "description": "Get a specific ecard by customer number and ecard information.",
        "operationId": "findSpecificEcardByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "ecardOperator",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "ecardNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EcardOwnershipResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Profiles client"],
        "summary": "Update E-card registration",
        "description": "Update an existing E-card for a customer. Can also be used to set a new owner of the E-card. The internal logic is 'find the customer who owns this E-card. Then, see if this is the same customer who is specified in the URL. If it isn't, move the card to this new customer.' Regardless of whether the card is moved, all fields are overwritten with the supplied info. Also note that it isn't possible to switch the card ownership to a customer from another organisation.",
        "operationId": "updateEcardRegistrationByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "ecardOperator",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "ecardNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EcardOwnershipRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EcardOwnershipResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/delete": {
      "put": {
        "tags": ["Profiles client"],
        "summary": "Deactivate customer",
        "description": "Deactivates a customer. In practice this means mark them for deletion and set the expiration date. Another process is responsible for the actual removal from the database. While a customer is deactivated, it's still possible to look them up, by specifying the includeDeleted flag.",
        "operationId": "deactivateCustomerByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "expirationDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "date-time" },
            "example": "2018-02-12T13:23:53+01:00"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/change-password": {
      "put": {
        "tags": ["Authentication admin"],
        "summary": "Change password",
        "description": "Change password for a customer. This method will first validate that the given oldPassword is correct, before storing the new password. This endpoint requires an Internal or Partner jwt-token.",
        "operationId": "changePassword",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ChangePasswordRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/temporary/{customerNumber}": {
      "put": {
        "tags": ["Temporary profiles client"],
        "summary": "Update temporary profile",
        "description": "Updates the temporary customer profile with the value provided. All fields are overwritten.",
        "operationId": "updateTemporaryProfileByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemporaryCustomerPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/preferences/{preferenceId}": {
      "get": {
        "tags": ["Preferences admin"],
        "summary": "Find Preference by id",
        "description": "Get a specific preference by Id.",
        "operationId": "findPreferenceById",
        "parameters": [
          {
            "name": "preferenceId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PreferenceResponse" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Preferences admin"],
        "summary": "Update preference",
        "description": "Update the fields of an existing preference. All values are stored and overrides current values.",
        "operationId": "updatePreference",
        "parameters": [
          {
            "name": "preferenceId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PreferenceRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PreferenceResponse" }
              }
            }
          }
        }
      }
    },
    "/customers/temporary/{customerNumber}": {
      "put": {
        "tags": ["Deprecated"],
        "summary": "Update temporary profile",
        "description": "Deprecated. Use /profiles/*. Updates the temporary customer profile with the value provided. All fields are overwritten.",
        "operationId": "updateTemporaryProfileByCustomerNumberDeprecated",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemporaryCustomerPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryCustomerResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/profiles": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find customers by parameters",
        "description": "A list of customers matching the search criteria. Always includes postalAddresses and personnelTickets if available.",
        "operationId": "findCustomersByParameters",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "surname",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Ignored unless telephoneNumberNoCountryCode is also set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" },
            "example": "+47"
          },
          {
            "name": "telephoneNumber",
            "in": "query",
            "description": "Ignored if countryCode and telephoneNumberNoCountryCode are set.",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "telephoneNumberNoCountryCode",
            "in": "query",
            "description": "Telephone number with no country code prefix. Ignored unless countryCode is also set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "landlineNumber",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "dateOfBirth",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "yyyy-MM-dd" },
            "example": "2018-02-12"
          },
          {
            "name": "postalAddress",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "postCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ticketRightOwner",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ticketRightBearer",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "maxResultSet",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "includeTemporary",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean", "default": false }
          },
          {
            "name": "invoiceOrganisationId",
            "in": "query",
            "description": "Organisation ID from Brønnøysund, for invoice profiles",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" },
            "example": 123456785
          },
          {
            "name": "vippsId",
            "in": "query",
            "description": "Vipps unique user identifier",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "uuid" },
            "example": "c06c4afe-d9e1-4c5d-939a-177d752a0944"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "object" } }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Profiles client"],
        "summary": "Create a customer",
        "description": "Creates a new customer in the database. If a customerRef is not specified, one will be assigned. The customerRef and email fields must be unique within an organisation. After the creation is complete, a CREATE event will be posted to the customer-changed queue.",
        "operationId": "createCustomer",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CustomerPostRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/related-customer-numbers": {
      "post": {
        "tags": ["Profiles client"],
        "summary": "Connect a temporary profile to a permanent profile",
        "description": "Connects a temporary profile a permanent profile",
        "operationId": "connectCustomer",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerConnectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerConnectResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/postal-addresses": {
      "post": {
        "tags": ["Profiles client"],
        "summary": "Create a new postal address",
        "description": "Create a new postal address for the customer. ",
        "operationId": "createPostalAddressByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PostalAddressRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostalAddressResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/ecard-ownerships": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find all E-cards for customer",
        "description": "Get all ecard information for the given customer.",
        "operationId": "findAllEcardsForCustomerByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "object" } }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Profiles client"],
        "summary": "Add E-card to customer",
        "description": "Create a new E-card registration for the given customer. ",
        "operationId": "addEcardToCustomerByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EcardOwnershipRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EcardOwnershipResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerNumber}/customer-accounts": {
      "get": {
        "tags": ["Customer accounts client"],
        "summary": "Get customer accounts",
        "description": "Get customer accounts by customer number.",
        "operationId": "getCustomerAccountsCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCustomerAccountResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Customer accounts client"],
        "summary": "Create a new customer account",
        "description": "Create a new customer account for the customer. ",
        "operationId": "createCustomerAccountCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAccountRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/verify-credentials": {
      "post": {
        "tags": ["Authentication admin"],
        "summary": "Verify credentials",
        "description": "Verify credentials for a customer. The customer is looked up based on the organisation Id of the logged on user, combined with the email address provided in the input.",
        "operationId": "verifyCredentials",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyCredentialsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/temporary": {
      "post": {
        "tags": ["Temporary profiles client"],
        "summary": "Create temporary profile",
        "description": "Creates a new temporary customer profile. Temporary profiles are used when consents are given by an anonymous user, or where we need to add just a name to a hardcopy pdf ticket when the buyer doesn't have a full profile. In those cases, we still require a customer reference in the consents API, so a customer profile must exist. However, the profile does not need to be permanent. Specifically, temporary profiles have an expiration date. On that date, they will be deleted from the system. Also, several fields that are required for a permanent profile, are voluntary for a temporary profile. A mechanism exists for converting a temporary profile into a permanent one.",
        "operationId": "createTemporaryProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemporaryCustomerPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/temporary/{customerNumber}/convert": {
      "post": {
        "tags": ["Temporary profiles client"],
        "summary": "Convert to permanent",
        "description": "Converts the temporary customer profile to a permanent profile. Note that this is a one-way change, there is no going back. When converting, all fields not present in the temporary profile need to be supplied.",
        "operationId": "convertToPermanentByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertTemporaryCustomerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/get-by/bulk": {
      "post": {
        "tags": ["Profiles client"],
        "summary": "Get many customers by customerNumbers",
        "description": "Get customer profile data for the provided customer numbers or customer references. The list is filtered based on the organisationId of the logged inn user. If both customer numbers and customer references is passed then customer numbers will be used, unless customer numbers is an empty list while customer references is a non-empty list.",
        "operationId": "getManyCustomersByCustomerNumbers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ProfilesBulkRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/preferences": {
      "get": {
        "tags": ["Preferences admin"],
        "summary": "List all preferences",
        "description": "Get the list of all supported preferences. This list will include inactive preferences.",
        "operationId": "listAllPreferences",
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "type": "array", "items": { "type": "object" } }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Preferences admin"],
        "summary": "Add preference",
        "description": "Add a preference to the database.",
        "operationId": "addPreference",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PreferenceRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/PreferenceResponse" }
              }
            }
          }
        }
      }
    },
    "/customers/temporary": {
      "post": {
        "tags": ["Deprecated"],
        "summary": "Create temporary profile",
        "description": "Deprecated. Use /profiles/*. Creates a new temporary customer profile. Temporary profiles are used when consents are given by an anonymous user, or where we need to add just a name to a hardcopy pdf ticket when the buyer doesn't have a full profile. In those cases, we still require a customer reference in the consents API, so a customer profile must exist. However, the profile does not need to be permanent. Specifically, temporary profiles have an expiration date. On that date, they will be deleted from the system. Also, several fields that are required for a permanent profile, are voluntary for a temporary profile. A mechanism exists for converting a temporary profile into a permanent one.",
        "operationId": "createTemporaryProfileDeprecated",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TemporaryCustomerPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemporaryCustomerResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/customers/temporary/{customerNumber}/convert": {
      "post": {
        "tags": ["Deprecated"],
        "summary": "Convert to permanent",
        "description": "Deprecated. Use /profiles/*. Converts the temporary customer profile to a permanent profile. Note that this is a one-way change, there is no going back. When converting, all fields not present in the temporary profile need to be supplied. ",
        "operationId": "convertToPermanentByCustomerNumberDeprecated",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConvertTemporaryCustomerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/profiles/{customerNumber}/customer-accounts/{accountId}": {
      "delete": {
        "tags": ["Customer accounts client"],
        "description": "Delete a customer account tied to a customer profile",
        "operationId": "deleteCustomerAccount",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Customer account id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": { "description": "OK" }
        }
      },
      "patch": {
        "tags": ["Customer accounts client"],
        "summary": "Patch a customer account. Follows the JSON Merge Patch RFC7396 standard.",
        "description": "A JSON merge patch document describes changes to be made to a target JSON document using a syntax that closely mimics the document being modified.\n Recipients of a merge patch document determine the exact set of changes being requested by comparing the content of the provided patch against the current content of the target document.\n If the provided merge patch contains members that do not appear within the target, those members are added.\n If the target does contain the member, the value is replaced.\n Null values in the merge patch are given special meaning to indicate the removal of existing values in the target.\n\n See 'CustomerAccountPatchRequest' for available fields to patch.",
        "operationId": "updateCustomerAccount",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "description": "Customer number",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "accountId",
            "in": "path",
            "description": "Customer account id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/merge-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAccountPatchRequest"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomerAccountPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomerAccountResponse"
                }
              }
            }
          }
        }
      }
    },
    "/profiles/{uuid}/by-uuid": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find customer by UUID",
        "description": "Gets a customer with related information, even if this customer has been deleted (though, in this case, that is all you're told). Like in the lookup by customerNumber, if the customer has been merged into another, you will get the active customer.",
        "operationId": "findCustomerByUuid",
        "parameters": [
          {
            "name": "uuid",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeECards",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includePersonnelTicket",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsents",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includePreferences",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeNotes",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/{organisationId}/{username}/by-org-and-email": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find Customer by organisation and username",
        "description": "Look up a customer with related information using the username for the profile. Within an organisation, email address is unique. Unlike the other lookups, this might return a passive customer or a customer created only for personnel ticket connection.",
        "operationId": "findCustomerByOrganisationAndEmail",
        "parameters": [
          {
            "name": "organisationId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/{org}/{username}/by-org-and-email": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find Customer by organization and username",
        "description": "This endpoint has been deprecated. Please use the Entur organisation Id. Look up a customer with related information using the username for the profile. Within an organisation, email address is unique. Unlike the other lookups, this might return a passive customer or a customer created only for personnel ticket connection.",
        "operationId": "findCustomerByOrganizationAndEmailDeprecated",
        "parameters": [
          {
            "name": "org",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "username",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/profiles/{ecardNumber}/by-ecard": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find customer by E-card number",
        "description": "Accepts both 16 digit and 10 digit ecard numbers. Gets a customer with related information. Like in the lookup by customerNumber, if the customer has been merged into another, you will get the active customer.",
        "operationId": "findCustomerByEcardNumber",
        "parameters": [
          {
            "name": "ecardNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeECards",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includePersonnelTicket",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsents",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includePreferences",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeNotes",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles/{customerReference}/by-customer-reference": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find customer by customer reference",
        "description": "Gets a customer with related information. If the passed customer reference is for a merged and passive customer, the result will instead be the active, merged customer. Thus, you may find a customer with a different customer reference than you specified in the URL.",
        "operationId": "findCustomerByCustomerReference",
        "parameters": [
          {
            "name": "customerReference",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeECards",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includePersonnelTicket",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsents",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includePreferences",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeDeleted",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeNotes",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/profiles-search": {
      "get": {
        "tags": ["Profiles client"],
        "summary": "Find customers by parameters, paginated",
        "description": "A paginated list of customers matching the search criteria. Always includes postalAddresses and personnelTickets if available.",
        "operationId": "findCustomersByParametersPaginated",
        "parameters": [
          {
            "name": "firstName",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "surname",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "countryCode",
            "in": "query",
            "description": "Ignored unless telephoneNumberNoCountryCode is also set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" },
            "example": "+47"
          },
          {
            "name": "telephoneNumber",
            "in": "query",
            "description": "Ignored if countryCode and telephoneNumberNoCountryCode are set.",
            "required": false,
            "deprecated": true,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "telephoneNumberNoCountryCode",
            "in": "query",
            "description": "Telephone number with no country code prefix. Ignored unless countryCode is also set.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "landlineNumber",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "dateOfBirth",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "yyyy-MM-dd" },
            "example": "2018-02-12"
          },
          {
            "name": "postalAddress",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "postCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ticketRightOwner",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "ticketRightBearer",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includePreferences",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeTemporary",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean", "default": false }
          },
          {
            "name": "invoiceOrganisationId",
            "in": "query",
            "description": "Organisation ID from Brønnøysund, for invoice profiles",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" },
            "example": 123456785
          },
          {
            "name": "page",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "perPage",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int32" }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Sort field. Allowable values are customerNumber, firstName, surname, email,dateOfBirth, organisationId",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" },
            "example": "sortBy=surname"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "Sort direction if sortBy is given.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" },
            "example": "sortDirection=desc"
          },
          {
            "name": "vippsId",
            "in": "query",
            "description": "Vipps unique user identifier",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "uuid" },
            "example": "c06c4afe-d9e1-4c5d-939a-177d752a0944"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageCustomerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/customer-accounts/{accountId}/profiles": {
      "get": {
        "tags": ["Customer accounts client"],
        "summary": "Get profile by customer account id",
        "description": "Get profile by customer account id",
        "operationId": "getProfileByCustomerAccountId",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/CustomerResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}/contracts/{contractUuid}/revoke": {
      "put": {
        "tags": ["Contracts admin"],
        "summary": "Revoke a contract for a loyalty program",
        "operationId": "revokeContract",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "contractUuid",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContractResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/pdfs/gift-card": {
      "post": {
        "tags": ["pdf-controller"],
        "summary": "Makes a PDF for a gift card",
        "description": "Makes a PDF for a gift card",
        "operationId": "makeGiftCardPDF",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GiftCardPDFRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/pdf": {
                "schema": { "type": "string", "format": "byte" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms": {
      "get": {
        "tags": ["Loyalty programs admin"],
        "summary": "Get all loyalty programs",
        "operationId": "getAllLoyaltyPrograms",
        "parameters": [
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "loyaltyProgramCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Selects a specific page in the collection",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "minimum": 1, "type": "string", "example": "1" }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Selects the number of elements per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "string",
              "example": "5"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfLoyaltyProgramFindAllResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Loyalty programs admin"],
        "summary": "Create a new loyalty program",
        "operationId": "createLoyaltyProgram",
        "parameters": [
          {
            "name": "organisationId",
            "in": "query",
            "description": "The organisation the contracts belong to. You must have an Internal token to use this.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" },
            "example": 3
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltyProgramPostRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyProgramFlatResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}/versions": {
      "post": {
        "tags": ["Loyalty programs admin"],
        "summary": "Create new loyalty program version.",
        "operationId": "createNewLoyaltyProgramVersion",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "loyaltyProgramCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoyaltyProgramVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyProgramFlatResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}/contracts": {
      "get": {
        "tags": ["Contracts admin"],
        "summary": "Get all contracts for a loyalty program.",
        "operationId": "getAllContracts",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "description": "Which organisationId to look up loyalty programs for. Internal use only",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Selects a specific page in the collection",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "minimum": 1, "type": "string", "example": "1" }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Selects the number of elements per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "string",
              "example": "5"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfSimpleContractResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Contracts admin"],
        "summary": "Create a contract for a loyalty program",
        "operationId": "createContract",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "description": "Which organisationId to look up loyalty programs for. Internal use only",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContractRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContractResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}/contracts/{contractUuid}/generate-pickup-code": {
      "post": {
        "tags": ["Contracts admin"],
        "description": "Generate a pickup code for a contract. This can only be done once per contract",
        "operationId": "generatePickupCode",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "contractUuid",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GeneratePickupCodeResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/by-code": {
      "post": {
        "tags": ["Loyalty programs admin"],
        "summary": "Get a company managed loyalty program by its code, if the client has access to the organisation. Returns a loyalty program for the customer to claim a contract for.",
        "operationId": "fetchLoyaltyProgramByLoyaltyProgramCode",
        "parameters": [
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "loyaltyProgramCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyProgramFlatResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/gift-cards": {
      "post": {
        "tags": ["Gift cards client"],
        "description": "Deprecated. Use /loyaltyprograms/{loyaltyProgramId}/contracts.Creates a new, blank, gift card. This gift card has no value. This is the only endpoint which will respond with the new cards code.",
        "operationId": "createGiftCard",
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/GiftCardResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/benefits/gift-cards/{contractUUID}/transactions/deposit": {
      "post": {
        "tags": ["Gift cards client"],
        "description": "Deprecated. Use /points/{contractUUID}/transactions/depositLook up the gift card in the local db. If found, add a deposit transaction to the card.",
        "operationId": "createDepositTransactionDeprecated",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GiftCardTransactionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/benefits/gift-cards/{code}/transactions/withdraw": {
      "post": {
        "tags": ["Gift cards client"],
        "description": "New platform gift cards should eventually use GET /contracts/{contractUUID} or GET /loyaltyprograms/{loyaltyProgramId}/contracts to find the contract, before performing POST /points/{contractUUID}/transactions/withdraw.First: If the giftCardCode is a LISA-compatible (10 digit) lisaCode, looks up the corresponding gift card in LISA and attempt to transfer the requested amount to a local card. Otherwise, looks up the card locally based on the gift card number. At this point, checks whether there is enough money on the gift card to fund the transaction.If so, create a new transaction on the local card detailing the change.",
        "operationId": "createWithdrawTransactionDeprecated",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GiftCardTransactionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/benefits/fraud-prevention/blocked-accessors/{customerNumber}": {
      "get": {
        "tags": ["Fraud prevention"],
        "summary": "Find access blocking for the given customer.",
        "operationId": "findBlockedCustomerAccessToConsumption",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedCustomerResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Fraud prevention"],
        "description": "Block a customer from connecting to new contracts. This will not alter already existing contracts for the customer.",
        "operationId": "blockCustomerAccessToConsumption",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedCustomerResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Fraud prevention"],
        "description": "Unblock a customer from connecting to new contracts. This will not alter already existing contracts for the customer.",
        "operationId": "unblockCustomerAccessToConsumption",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/BlockedCustomerResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{contractUUID}/transactions/withdraw": {
      "post": {
        "tags": ["Contract transactions admin"],
        "summary": "Add a withdrawal transaction to a contract. An error is thrown if there is not enough funds on the contract.",
        "operationId": "createWithdrawTransaction",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContractTransactionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{contractUUID}/transactions/transfer": {
      "post": {
        "tags": ["Contract transactions admin"],
        "summary": "Add a withdrawal transaction to the contract and deposit the same amount on a new contract.Returns two transactions, one for each contract",
        "operationId": "transferTransaction",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransferTransactionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{contractUUID}/transactions/refund": {
      "post": {
        "tags": ["Contract transactions admin"],
        "summary": "Refund a transaction. This operation will create a new gift card with the refunded total.Returns two transactions, one for each contract",
        "operationId": "refundTransaction",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TransferTransactionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{contractUUID}/transactions/deposit": {
      "post": {
        "tags": ["Contract transactions admin"],
        "summary": "Add a deposit transaction to a contract.",
        "operationId": "createDepositTransaction",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractTransactionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContractTransactionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{contractUUID}/order-line-events": {
      "post": {
        "tags": ["Contract usage admin"],
        "summary": "Add an order line event to a contract, registering usage. This is only valid on TIMED loyalty programs.",
        "operationId": "addOrderLineEvent",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/OrderLineEventRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/OrderLineEventResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{contractUUID}/contract-consumer": {
      "post": {
        "tags": ["Contracts client"],
        "summary": "Add contract consumer",
        "description": "Add the customer as a consumer to the contract",
        "operationId": "addContractConsumer",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContractConsumerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContractConsumerResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/validate-consumptions": {
      "post": {
        "tags": ["Contracts client"],
        "summary": "Validate contract consumption",
        "description": "Validate that the customer can consume given contracts",
        "operationId": "validateContractUse",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ValidateContractConsumptionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateContractConsumptionResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}/contracts/{contractUuid}": {
      "patch": {
        "tags": ["Contracts admin"],
        "summary": "Patch a contract for a loyalty program",
        "operationId": "patchContract",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "contractUuid",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ContractPatchRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ContractResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{contractUUID}/contract-consumer/{customerNumber}": {
      "delete": {
        "tags": ["Contracts client"],
        "summary": "Removes a contract consumer",
        "description": "Removes the customer as a consumer from the contract. If this is the contract holder, all non-blocked consumers will be removed.",
        "operationId": "removeContractConsumer",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ContractResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Contracts client"],
        "summary": "Alter a contract consumer",
        "description": "Adjust properties for the given contract consumer",
        "operationId": "updateContractConsumer",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConsumerPatchRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ContractConsumerResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{productId}/by-product-id": {
      "get": {
        "tags": ["Loyalty programs admin"],
        "description": "Get loyalty program by product id",
        "operationId": "getLoyaltyProgramByProductId",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyProgramFlatResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}": {
      "get": {
        "tags": ["Loyalty programs admin"],
        "summary": "Get a loyalty program",
        "operationId": "getLoyaltyProgram",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "loyaltyProgramCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyProgramFlatResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Loyalty programs admin"],
        "summary": "Delete a loyalty program and its versions",
        "operationId": "deleteLoyaltyProgram",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "204": { "description": "No Content" },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}/versions/{versionNumber}": {
      "get": {
        "tags": ["Loyalty programs admin"],
        "summary": "Get loyalty program version.",
        "operationId": "getLoyaltyProgramVersionBasedOnVersionId",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "versionNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "loyaltyProgramCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyProgramFlatResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}/reports/used-point-contracts": {
      "get": {
        "tags": ["Loyalty program reports"],
        "description": "Get a report of used point contracts by specified month/year as CSV. Report contains: date of usage, contract uuid, amount, rnr, order id and internal transaction id",
        "operationId": "getUsedPointsContractsReportCSV",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year from 2021.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 2099,
              "minimum": 2020,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month, from 1 to 12.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": { "maximum": 12, "minimum": 1, "type": "string" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": { "$ref": "#/components/schemas/UsedPointContract" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}/reports/new-point-contracts": {
      "get": {
        "tags": ["Loyalty program reports"],
        "description": "Get a report of created point contracts by specified month/year as CSV. Report contains: date of creation, contract uuid, organisation id, amount, internal transaction id, email, posId",
        "operationId": "getCreatedPointsContractsReportCSV",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year from 2021.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 2099,
              "minimum": 2020,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month, from 1 to 12.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": { "maximum": 12, "minimum": 1, "type": "string" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": { "$ref": "#/components/schemas/NewPointContract" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/{loyaltyProgramId}/reports/expired-point-contracts": {
      "get": {
        "tags": ["Loyalty program reports"],
        "description": "Get a report of expired point contracts by specified month/year as CSV. Report contains: date of expiration, contract uuid, organisation id, amount",
        "operationId": "getExpiredPointsContractsReportCSV",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "year",
            "in": "query",
            "description": "Year from 2021.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 2099,
              "minimum": 2020,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "month",
            "in": "query",
            "description": "Month, from 1 to 12.",
            "required": true,
            "style": "form",
            "explode": true,
            "schema": { "maximum": 12, "minimum": 1, "type": "string" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "text/csv": {
                "schema": {
                  "$ref": "#/components/schemas/ExpiredPointContract"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/company-managed-programs": {
      "get": {
        "tags": ["Loyalty programs admin"],
        "summary": "Get company managed programs",
        "operationId": "getCompanyManagedPrograms",
        "parameters": [
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "loyaltyProgramCode",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Selects a specific page in the collection",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "minimum": 1, "type": "string", "example": "1" }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Selects the number of elements per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "string",
              "example": "5"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfLoyaltyProgramFlatResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/company-managed-programs/{loyaltyProgramId}": {
      "get": {
        "tags": ["Loyalty programs admin"],
        "summary": "Get company managed program",
        "operationId": "getCompanyManagedProgram",
        "parameters": [
          {
            "name": "loyaltyProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoyaltyProgramFlatResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/gift-cards/{codeOrLisaCode}": {
      "get": {
        "tags": ["Gift cards client"],
        "description": "New platform gift cards should eventually use GET /contracts/{contractUUID} or GET /loyaltyprograms/{loyaltyProgramId}/contractsReturns the gift card with the supplied code. If the code is a valid LISA-style code, it is looked up in LISA and the remaining value, if any, is shown on this response",
        "operationId": "getByGiftCardCode",
        "parameters": [
          {
            "name": "codeOrLisaCode",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/GiftCardResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/benefits/contracts": {
      "get": {
        "tags": ["Contracts client"],
        "summary": "Return all contracts with possible filtering",
        "description": "Return all contracts with possible filtering",
        "operationId": "getAllContractsByParameters",
        "parameters": [
          {
            "name": "uuid",
            "in": "query",
            "description": "Get the contract matching the uuid",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "customerNumber",
            "in": "query",
            "description": "Get all contracts where a customer is a contractConsumer using Unique Entur id",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "customerRef",
            "in": "query",
            "description": "Get all contracts where a customer is a contractConsumer using external customer id unique within an organisation",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "loyaltyProgramId",
            "in": "query",
            "description": "Get all contracts for a specific loyaltyProgram",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "contractHolder",
            "in": "query",
            "description": "Get all contracts for a specific contract holder. Use customerNumber as value",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "consumableAfter",
            "in": "query",
            "description": "Get all contracts which can be consumed after this date. Supports ISO 8601 date format",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "consumableBefore",
            "in": "query",
            "description": "Get all contracts which can be consumed before this date. Supports ISO 8601 date format",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "expirationDateAfter",
            "in": "query",
            "description": "Get all contracts with expiration date after this date. Supports ISO 8601 date format",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "expirationDateBefore",
            "in": "query",
            "description": "Get all contracts with expiration date before this date. Supports ISO 8601 date format",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "externalRef",
            "in": "query",
            "description": "Get all contracts by external reference. This is, for example, the personnel ticket code",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "description": "The organisation the contracts belong to. You must have an Internal token to use this.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" },
            "example": 3
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "Properties to sort the response by.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "customerNumber",
                  "loyaltyProgramId",
                  "uuid",
                  "consumableFrom"
                ]
              }
            },
            "example": "loyaltyProgramId,customerNumber"
          },
          {
            "name": "sortDirection",
            "in": "query",
            "description": "The sort direction if sortBy is specified",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "string",
              "example": "asc",
              "enum": ["asc", "desc"]
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page to be retrieved. Starts at 1",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "minimum": 1, "type": "string", "example": "5" }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Number of items per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "string",
              "example": "50"
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfContractResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{pickupCode}/by-pickup-code": {
      "get": {
        "tags": ["Contracts client"],
        "summary": "Get contract by its pickup code",
        "description": "Find a contract by its pickup code.",
        "operationId": "findSingleContractByPickupCode",
        "parameters": [
          {
            "name": "pickupCode",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ContractResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{externalRef}/by-external-ref": {
      "get": {
        "tags": ["Contracts client"],
        "summary": "Get contracts by external ref",
        "description": "Finds contracts by external reference.",
        "operationId": "getContractsByExternalRef",
        "parameters": [
          {
            "name": "externalRef",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "description": "The organisation the contracts belong to, left empty will use orgID from token.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" },
            "example": 3
          },
          {
            "name": "page",
            "in": "query",
            "description": "Selects a specific page in the collection",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "minimum": 1, "type": "string", "example": "1" }
          },
          {
            "name": "perPage",
            "in": "query",
            "description": "Selects the number of elements per page",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "string",
              "example": "5"
            }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "Entur-Customer-Number",
            "in": "header",
            "description": "To identify logged in user and limit access per user",
            "required": false,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageOfContractResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/{contractUUID}": {
      "get": {
        "tags": ["Contracts client"],
        "summary": "Get contract by uuid",
        "description": "Find a contract by its uuid.",
        "operationId": "findSingleContractByUuid",
        "parameters": [
          {
            "name": "contractUUID",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string", "format": "uuid" }
          },
          {
            "name": "includeSubContracts",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean", "default": false }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ContractResponse" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contract-consumers/{customerNumber}/contracts": {
      "get": {
        "tags": ["Contract client"],
        "description": "Return all valid contracts by customer number. Returns only contracts with status VALID within timeframe. ",
        "operationId": "getAllValidContractsByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "travelDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "includeExpiredContracts",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeOrderLineEvents",
            "in": "query",
            "description": "Whether to include order line events in the response. Note: setting this to true may impact performance. Default false.",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeConsumers",
            "in": "query",
            "description": "Whether to include contract consumers in the response. Supported formats are 'all', 'none' and 'contract-holder'. Note: setting this to ALL may impact performance. Default is 'contract-holder'",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "all|none|contract-holder",
              "type": "string",
              "example": "none",
              "enum": ["all", "none", "contract-holder"]
            }
          },
          {
            "name": "queryParams",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ContractResponse" }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/loyaltyprograms/company-managed-programs/{companyManagedProgramId}": {
      "delete": {
        "tags": ["Loyalty programs admin"],
        "summary": "Delete a company managed program and its versions",
        "operationId": "deleteCompanyManagedProgram",
        "parameters": [
          {
            "name": "companyManagedProgramId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "204": { "description": "No Content" },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/consents/client/given-consents/{givenConsentId}": {
      "get": {
        "tags": ["Given consents client"],
        "summary": "Find a given consent.",
        "description": "Find a given consent defined by its id.",
        "operationId": "getGivenConsent",
        "parameters": [
          {
            "name": "givenConsentId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GivenConsentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Given consents client"],
        "summary": "Update a given consent.",
        "description": "Update a given consent by its id.",
        "operationId": "updateGivenConsent",
        "parameters": [
          {
            "name": "givenConsentId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GivenConsentPutRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GivenConsentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Given consents client"],
        "summary": "Delete given consent.",
        "description": "Delete a given consent by its id.",
        "operationId": "deleteGivenConsent",
        "parameters": [
          {
            "name": "givenConsentId",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "204": { "description": "No Content" }
        }
      }
    },
    "/consents/client/given-consents/bulk/{customerRef}/by-customer-ref": {
      "put": {
        "tags": ["Given consents client"],
        "summary": "Bulk update given consents.",
        "description": "Bulk update given consents by customer ref.",
        "operationId": "bulkUpdateGivenConsentsByCustomerRef",
        "parameters": [
          {
            "name": "customerRef",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/GivenConsentRequest" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GivenConsentResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/client/given-consents/bulk/{customerNumber}/by-customer-number": {
      "put": {
        "tags": ["Given consents client"],
        "summary": "Bulk update given consents.",
        "description": "Bulk update given consents by customer number.",
        "operationId": "bulkUpdateGivenConsentsByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": { "$ref": "#/components/schemas/GivenConsentRequest" }
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GivenConsentResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/admin/consents/{id}": {
      "get": {
        "tags": ["Consents admin"],
        "summary": "Get a consent",
        "description": "Get a consent by its id.",
        "operationId": "getConsentAsAdmin",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the consent to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Consents admin"],
        "summary": "Update a consent",
        "description": "Update a consent by its id.",
        "operationId": "updateConsent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the consent to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConsentRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Consents admin"],
        "summary": "Delete a consent",
        "description": "Delete a consent by its id.",
        "operationId": "deleteConsent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the consent to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "204": { "description": "No Content" }
        }
      },
      "patch": {
        "tags": ["Consents admin"],
        "summary": "Update a consent",
        "description": "Update a consent by its id.",
        "operationId": "patchConsent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the consent to update",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConsentPatchRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/admin/consent-bases/{consentCode}/versions/{version}": {
      "get": {
        "tags": ["Consents admin"],
        "summary": "Find a consent base versions",
        "description": "FInd a specific version for consent base",
        "operationId": "findVersionForConsentBase",
        "parameters": [
          {
            "name": "consentCode",
            "in": "path",
            "description": "The consent code of the consent base to find version for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version to find",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentBaseResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "put": {
        "tags": ["Consents admin"],
        "summary": "Update a consent base version. Note: you can only edit draft versions of consent bases without creating a new version.",
        "description": "Update a consent base version by its consent code. Note: you can only edit draft versions of consent bases without creating a new version.",
        "operationId": "updateVersionForConsentBase",
        "parameters": [
          {
            "name": "consentCode",
            "in": "path",
            "description": "The consent code of the consent base to update.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConsentBaseRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentBaseResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Consents admin"],
        "description": "Delete a consent base version",
        "operationId": "deleteVersionForConsentBase",
        "parameters": [
          {
            "name": "consentCode",
            "in": "path",
            "description": "The consent code of the consent base to delete version for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "204": { "description": "No Content" }
        }
      },
      "patch": {
        "tags": ["Consents admin"],
        "description": "Patch a consent base version",
        "operationId": "patchVersionForConsentBase",
        "parameters": [
          {
            "name": "consentCode",
            "in": "path",
            "description": "The consent code of the consent base to patch version for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "version",
            "in": "path",
            "description": "The version to patch",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int32" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentBaseVersionPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentBaseResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/client/given-consents": {
      "get": {
        "tags": ["Given consents client"],
        "summary": "Find a given consent",
        "description": "Find a given consent defined by its id.",
        "operationId": "findGivenConsent",
        "parameters": [
          {
            "name": "originalDatedServiceJourneyIds",
            "in": "query",
            "description": "Search given consent by originalDatedServiceJourneyId (comma separated). Example: originalDatedServiceJourneyId=ENT:DatedServiceJourney:XXXXX,ENT:DatedServiceJourney:YYYYY",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "lineRef",
            "in": "query",
            "description": "Search given consents by lineRef (comma separated). Example: lineRef=XXX:Line:YY,XXX:Line:ZZ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "stopPlaces",
            "in": "query",
            "description": "Search given consents by stopPlaces(includes start and end stop) (comma separated). Example: stopPlaces=NSR:StopPlace:XXXXX,NSR:StopPlace:YYYYY",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GivenConsentResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Given consents client"],
        "summary": "Create a given consent.",
        "description": "Create a given consent.",
        "operationId": "addGivenConsent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/GivenConsentRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GivenConsentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/client/given-consents/get-by/bulk": {
      "post": {
        "tags": ["Given consents client"],
        "summary": "Find consent data for provided customers.",
        "description": "Get all consent data for the provided customer refs filtered by organisation.",
        "operationId": "findConsentDataForProvidedCustomers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GivenConsentBulkRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GivenConsentResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/admin/consents": {
      "get": {
        "tags": ["Consents admin"],
        "description": "Find all consents",
        "operationId": "findAllConsentsAsAdmin",
        "parameters": [
          {
            "name": "organisationIds",
            "in": "query",
            "description": "Filter consents by organisation id's (comma separated). Example: organisationIds=1,20,25",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int64" }
            }
          },
          {
            "name": "consentCodes",
            "in": "query",
            "description": "Filter consents by consent codes (comma separated). Example: consentCodes=consentCode1,consentCode2",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "versions",
            "in": "query",
            "description": "Filter consents by versions (comma separated). Example: versions=1,2 Note: You can also use the keywords: ALL or CURRENT. Example: versions=ALL (default: CURRENT) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether or not to include inactive consents (default: false)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ConsentResponse" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Consents admin"],
        "description": "Create a consent",
        "operationId": "addConsent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConsentRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/admin/consent-bases": {
      "get": {
        "tags": ["Consents admin"],
        "summary": "Find all consent bases",
        "description": "List all current consent bases available by tenant.",
        "operationId": "findAllConsentBases",
        "parameters": [
          {
            "name": "includeAllVersions",
            "in": "query",
            "description": "Whether or not to include all versions of all consents bases (default: false)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConsentBaseResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Consents admin"],
        "description": "Create consent base",
        "operationId": "addConsentBase",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/ConsentBaseRequest" }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentBaseResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/admin/consent-bases/{consentCode}/versions": {
      "get": {
        "tags": ["Consents admin"],
        "summary": "Find all consent base versions",
        "description": "All versions for consent base",
        "operationId": "findAllVersionsForConsentBase",
        "parameters": [
          {
            "name": "consentCode",
            "in": "path",
            "description": "The consent code of the consent base to find versions for.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConsentBaseResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Consents admin"],
        "summary": "Update a consent base and create a new version. ",
        "description": "Update a consent base and create a new version by its consent code.",
        "operationId": "createNewVersionForConsentBase",
        "parameters": [
          {
            "name": "consentCode",
            "in": "path",
            "description": "The consent code of the consent base to update.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentBaseVersionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentBaseResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/crm": {
      "get": {
        "tags": ["Consents DWH"],
        "summary": "Find all consent info",
        "description": "Search for consent information by consent ids.",
        "operationId": "findAllConsentInfo",
        "parameters": [
          {
            "name": "consentIds",
            "in": "query",
            "description": "Filter consents by its id (comma separated). Example: consentIds=1,2,3",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int64" }
            }
          },
          {
            "name": "includeEmail",
            "in": "query",
            "description": "Whether or not to include email (Default: false).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          },
          {
            "name": "includeTelephoneNumber",
            "in": "query",
            "description": "Whether or not to include telephone number (Default: false).",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ConsentCrmResponse" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/client/given-consents/{customerRef}/by-customer-ref": {
      "get": {
        "tags": ["Given consents client"],
        "summary": "Find all by customer ref.",
        "description": "Find all given consents associated with a customer ref.",
        "operationId": "findAllGivenConsentsByCustomerRef",
        "parameters": [
          {
            "name": "customerRef",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GivenConsentResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/client/given-consents/{customerNumber}/by-customer-number": {
      "get": {
        "tags": ["Given consents client"],
        "summary": "Find all by customer number.",
        "description": "Find all given consents associated with a customer number.",
        "operationId": "findAllGivenConsentsByCustomerNumber",
        "parameters": [
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GivenConsentResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/client/consents": {
      "get": {
        "tags": ["Consents client"],
        "description": "Find all consents",
        "operationId": "findAllConsents",
        "parameters": [
          {
            "name": "organisationIds",
            "in": "query",
            "description": "Filter consents by organisation id's (comma separated). Example: organisationIds=1,20,25",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "type": "array",
              "items": { "type": "integer", "format": "int64" }
            }
          },
          {
            "name": "consentCodes",
            "in": "query",
            "description": "Filter consents by consent codes (comma separated). Example: consentCodes=consentCode1,consentCode2",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "versions",
            "in": "query",
            "description": "Filter consents by versions (comma separated). Example: versions=1,2 Note: You can also use the keywords: ALL or CURRENT. Example: versions=ALL (Default: CURRENT) ",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "array", "items": { "type": "string" } }
          },
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Whether or not to include inactive consents (Default: false)",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/ConsentResponse" }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/client/consents/{id}": {
      "get": {
        "tags": ["Consents client"],
        "summary": "Get a consent",
        "description": "Get a consent by its id.",
        "operationId": "getConsent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the consent to retrieve",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      }
    },
    "/consents/admin/consent-bases/{consentCode}": {
      "get": {
        "tags": ["Consents admin"],
        "summary": "Find a consent base",
        "description": "Current version of consent base.",
        "operationId": "findConsentBase",
        "parameters": [
          {
            "name": "consentCode",
            "in": "path",
            "description": "The consent code of the consent base to find.",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ConsentBaseResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Consents admin"],
        "summary": "Delete a consent base",
        "description": "Delete a consent base by its consent code",
        "operationId": "deleteConsentBase",
        "parameters": [
          {
            "name": "consentCode",
            "in": "path",
            "description": "The consent code of the consent base to delete",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "200": { "description": "OK" },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorMessage" }
              }
            }
          },
          "204": { "description": "No Content" }
        }
      }
    },
    "/authentication/generate-password": {
      "put": {
        "tags": ["Authentication client"],
        "summary": "Generate new password for customer",
        "description": "Generates a new password for a profile identified by organisationId and email address. The new password is sent to the customer via email and/or sms. ",
        "operationId": "generatePasswordOrchestrator",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GeneratePasswordRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "204": { "description": "No Content" },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/contracts/claim-personnel-ticket": {
      "post": {
        "tags": ["Contracts client"],
        "summary": "Claims a personnel ticket directly.",
        "description": " Claim a personnel ticket for the given customer profile. A personnel ticket may correspond to more than one contract in benefits, and this method will attempt to claim them all.",
        "operationId": "claimPersonnelTicket",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClaimPersonnelTicketRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClaimContractResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/travellerinfo": {
      "get": {
        "tags": ["Traveller information"],
        "summary": "Get contact info for all travellers on a given DatedServiceJourney.",
        "description": "Get contact info for all travellers on a given DatedServiceJourney.",
        "operationId": "getTravellerInfos",
        "parameters": [
          {
            "name": "datedServiceJourneyId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "[A-Z]{3}:DatedServiceJourney:[\\da-zA-Z_-]+",
              "type": "string"
            }
          },
          {
            "name": "originalDatedServiceJourneyId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": {
              "pattern": "[A-Z]{3}:DatedServiceJourney:[\\da-zA-Z_-]+",
              "type": "string"
            }
          },
          {
            "name": "serviceJourneyId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string" }
          },
          {
            "name": "departureDate",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "date" }
          },
          {
            "name": "organisationId",
            "in": "query",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "integer", "format": "int64" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/TravellerInfo" }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    },
    "/benefits/entitlements/{customerNumber}/by-customer-number": {
      "get": {
        "tags": ["Entitlements"],
        "summary": "Gets entitlements for a customer",
        "description": "Gets entitlements for a customer by customer number, including information about the product, contract and contract holder.",
        "operationId": "getEntitlementsByCustomerNumber",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "string" }
          },
          {
            "name": "customerNumber",
            "in": "path",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": { "type": "integer", "format": "int64" }
          },
          {
            "name": "travelDate",
            "in": "query",
            "description": "Get valid entitlements for travel date",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "string", "format": "date-time" }
          },
          {
            "name": "excludeSubContracts",
            "in": "query",
            "description": "Exclude day trip entitlements. Default is false",
            "required": false,
            "style": "form",
            "explode": true,
            "schema": { "type": "boolean" }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          },
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntitlementResponse"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/ErrorResponse" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ChangePasswordRequest": {
        "required": ["newPassword", "oldPassword"],
        "type": "object",
        "properties": {
          "newPassword": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "The new user password."
          },
          "oldPassword": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "The old user password."
          },
          "validationErrors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ErrorMessage" }
          }
        },
        "description": "The fields used when verifying credentials"
      },
      "ConvertTemporaryCustomerRequest": {
        "required": [
          "changedBy",
          "changedByChannel",
          "email",
          "firstName",
          "password",
          "surname"
        ],
        "type": "object",
        "properties": {
          "changedBy": {
            "maxLength": 100,
            "type": "string",
            "description": "ChangedBy of the temporary customer to be converted to a permanent customer"
          },
          "changedByChannel": {
            "maxLength": 100,
            "type": "string",
            "description": "ChangedByChannel of the temporary customer to be converted to a permanent customer"
          },
          "customerRef": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "Optional customer reference. Defaults to customer number if not set"
          },
          "email": {
            "maxLength": 80,
            "type": "string",
            "description": "Email of the temporary customer to be converted to a permanent customer. This also becomes the profile's username"
          },
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "description": "First name of the temporary customer to be converted to a permanent customer"
          },
          "organisationId": {
            "type": "integer",
            "description": "Organisation id of the temporary customer to be converted to a permanent customer",
            "format": "int64"
          },
          "password": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Password of the temporary customer to be converted to a permanent customer"
          },
          "surname": {
            "maxLength": 50,
            "type": "string",
            "description": "Surname of the temporary customer to be converted to a permanent customer"
          }
        },
        "description": "The properties used when converting a temporary customer profile"
      },
      "CustomerAccountPatchRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "maxLength": 50,
            "type": "string",
            "description": "Customer account alias"
          },
          "isDefault": {
            "type": "boolean",
            "description": "True if account is the default account for the customer."
          }
        },
        "description": "Update a customer account connected to a customer"
      },
      "CustomerAccountRequest": {
        "required": ["accountId", "alias"],
        "type": "object",
        "properties": {
          "accountId": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer account id."
          },
          "alias": {
            "maxLength": 50,
            "type": "string",
            "description": "Customer account alias"
          },
          "isDefault": {
            "type": "boolean",
            "description": "True if account is default for customer. Default false."
          }
        },
        "description": "Create a customer account connected to a customer"
      },
      "CustomerAccountResponse": {
        "required": [
          "createdAt",
          "createdBy",
          "customerAccountId",
          "customerNumber",
          "id"
        ],
        "type": "object",
        "properties": {
          "alias": {
            "type": "string",
            "description": "Alias for the customer account",
            "example": "Tommy"
          },
          "changedAt": {
            "type": "string",
            "description": "When the customer account was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "changedBy": {
            "type": "string",
            "description": "Who changed the customer account."
          },
          "createdAt": {
            "type": "string",
            "description": "When the customer account was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "createdBy": {
            "type": "string",
            "description": "Who created the customer account."
          },
          "customerAccountId": {
            "type": "string",
            "description": "Customer account id string",
            "example": "ATB:CustomerAccount:abc58673cde-1c82-4bc5-989c-9d5eaa7ea866"
          },
          "customerNumber": {
            "type": "integer",
            "description": "Unique customer number",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "description": "Customer account unique id.",
            "format": "int64"
          },
          "isDefault": {
            "type": "boolean",
            "description": "True if the account is the default account for the customer"
          }
        },
        "description": "Customer account connected to a customer"
      },
      "CustomerConnectRequest": {
        "required": ["changedByChannel", "temporaryCustomerNumber"],
        "type": "object",
        "properties": {
          "changedByChannel": {
            "type": "string",
            "description": "Which sales channel or system who last changed the customer. Used for traceability in accordance with GDPR"
          },
          "temporaryCustomerNumber": {
            "type": "integer",
            "description": "Customer number of temporary customer to connect",
            "format": "int64"
          }
        },
        "description": "Request to connect a temporary profile to a regular profie"
      },
      "CustomerConnectResponse": {
        "required": ["changedAt", "relatedCustomerNumbers"],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the list of connected profiles was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "relatedCustomerNumbers": {
            "type": "array",
            "description": "Customer numbers for temporary profiles that is connected to a profile",
            "items": {
              "type": "integer",
              "description": "Customer numbers for temporary profiles that is connected to a profile",
              "format": "int64"
            }
          }
        },
        "description": "Connected temporary profiles for a profile"
      },
      "CustomerConsent": {
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the customer consent was last changed.",
            "format": "date-time"
          },
          "consentChoice": {
            "type": "boolean",
            "description": "Whether the customer has approved or declined this consent."
          },
          "consentCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The consent code."
          },
          "createdAt": {
            "type": "string",
            "description": "When the customer consent was created.",
            "format": "date-time"
          },
          "customerId": {
            "type": "integer",
            "description": "Id of the customer.",
            "format": "int64"
          }
        },
        "description": "Legacy consents for a customer"
      },
      "CustomerPostRequest": {
        "required": [
          "createdBy",
          "createdByChannel",
          "firstName",
          "organisationId",
          "password",
          "surname"
        ],
        "type": "object",
        "properties": {
          "countryCode": {
            "maxLength": 4,
            "type": "string",
            "description": "Telephone number country code, starting with +.",
            "example": "+47"
          },
          "createdBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who created the customer. Either web, app or username of employee. Used for traceability in accordance with GDPR"
          },
          "createdByChannel": {
            "maxLength": 100,
            "type": "string",
            "description": "Which sales channel or system who created the customer. Examples include web, app, crm. Used for traceability in accordance with GDPR"
          },
          "customerAccountId": {
            "maxLength": 60,
            "type": "string",
            "description": "Deprecated. Use /profiles/{customerNumber}/customer-accounts. Customer account id used for account based ticketing",
            "example": "XYZ:CustomerAccount:<uuid>",
            "deprecated": true
          },
          "customerRef": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "Optional customer reference. Defaults to customer number if not set"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth. ISO 8601 date format",
            "format": "date",
            "example": "2019-04-05"
          },
          "email": {
            "maxLength": 80,
            "type": "string",
            "description": "Email used for contact and potentially also for login."
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when the customers personal data should be deleted. Personal data will be deleted continuously. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "description": "First and middle name."
          },
          "landlineNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Landline telephone number."
          },
          "languagePreference": {
            "type": "string",
            "description": "Deprecated, please use languagePreferenceISO6393. Which language the customer wants information in. Default is 'NO'.",
            "deprecated": true,
            "enum": ["NO", "EN"]
          },
          "languagePreferenceISO6393": {
            "type": "string",
            "description": "Which language the customer wants information in. ISO 639-3 format. Default is 'NOB'.",
            "enum": ["NOB", "NNO", "ENG"]
          },
          "nationality": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The customers nationality. ISO 3166-1 alpha-3 format",
            "example": "NOR"
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation the customer is registered with.",
            "format": "int64"
          },
          "password": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "The users password"
          },
          "postalAddresses": {
            "type": "array",
            "description": "The postal addresses connected to the customer.",
            "items": { "$ref": "#/components/schemas/PostalAddressRequest" }
          },
          "profileType": {
            "type": "string",
            "description": "Type of profile. Types supported: 'S' = Standard customer, 'P' = Personnel ticket customer, 'T' = Temporary customer. Default is 'S'.",
            "default": "S",
            "enum": ["S", "P", "T"]
          },
          "surname": {
            "maxLength": 50,
            "type": "string",
            "description": "Surname."
          },
          "telephoneNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Deprecated. Please use countryCode and telephoneNumberNoCountryCode. Telephone number for customer. This should be a cell phone number."
          },
          "telephoneNumberNoCountryCode": {
            "maxLength": 12,
            "type": "string",
            "description": "Telephone number without country code or punctuation."
          },
          "vippsId": {
            "type": "string",
            "description": "Vipps unique user identifier",
            "format": "uuid",
            "example": "c06c4afe-d9e1-4c5d-939a-177d752a0944"
          }
        },
        "description": "A registered customer post request"
      },
      "CustomerPreferenceRequest": {
        "required": ["preferenceId"],
        "type": "object",
        "properties": {
          "preferenceId": {
            "type": "integer",
            "description": "Id of the preference",
            "format": "int64"
          },
          "preferenceValue": {
            "maxLength": 100,
            "type": "string",
            "description": "Value of the preference. This can be things like membership number."
          }
        },
        "description": "Preferences request for a customer"
      },
      "CustomerPreferenceResponse": {
        "required": ["changedAt", "createdAt", "preference", "preferenceId"],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the customer preference was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "createdAt": {
            "type": "string",
            "description": "When the customer preference was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "customerId": {
            "type": "integer",
            "description": "Id of the customer. Deprecated",
            "format": "int64",
            "deprecated": true
          },
          "preference": { "$ref": "#/components/schemas/PreferenceResponse" },
          "preferenceId": {
            "type": "integer",
            "description": "Id of the preference",
            "format": "int64"
          },
          "preferenceValue": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Value of the preference. This can be things like membership number."
          }
        },
        "description": "Preferences response for a customer"
      },
      "CustomerPutRequest": {
        "required": ["changedBy", "changedByChannel", "firstName", "surname"],
        "type": "object",
        "properties": {
          "changedBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who last changed the customer. Either web, app or username of employee. Used for traceability in accordance with GDPR"
          },
          "changedByChannel": {
            "maxLength": 100,
            "type": "string",
            "description": "Which sales channel or system who last changed the customer. Used for traceability in accordance with GDPR"
          },
          "countryCode": {
            "maxLength": 4,
            "type": "string",
            "description": "Telephone number country code, starting with +.",
            "example": "+47"
          },
          "customerAccountId": {
            "maxLength": 60,
            "type": "string",
            "description": "Deprecated. The field is no longer stored. Use /profiles/{customerNumber}/customer-accounts. Customer account id used for account based ticketing.",
            "example": "XYZ:CustomerAccount:<uuid>",
            "deprecated": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth. ISO 8601 date format",
            "format": "date",
            "example": "2019-04-05"
          },
          "email": {
            "maxLength": 80,
            "type": "string",
            "description": "Email used for contact and potentially also for login"
          },
          "emailVerifiedAt": {
            "type": "string",
            "description": "When the email was verified. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when the customers personal data should be deleted. Personal data will be deleted continuously. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "description": "First and middle name."
          },
          "landlineNumber": {
            "maxLength": 80,
            "type": "string",
            "description": "Landline telephone number."
          },
          "languagePreference": {
            "type": "string",
            "description": "Deprecated, please use languagePreferenceISO6393. Which language the customer wants information in. Default is 'NO'.",
            "deprecated": true,
            "enum": ["NO", "EN"]
          },
          "languagePreferenceISO6393": {
            "type": "string",
            "description": "Which language the customer wants information in. ISO 639-3 format. Default is 'NOB'.",
            "enum": ["NOB", "NNO", "ENG"]
          },
          "nationality": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The customers nationality. ISO 3166-1 alpha-3 format",
            "example": "NOR"
          },
          "postalAddresses": {
            "type": "array",
            "description": "The postal addresses connected to the customer.",
            "items": { "$ref": "#/components/schemas/PostalAddressRequest" }
          },
          "status": {
            "type": "string",
            "description": "Customer status. Statuses supported: 'A' = Active, 'P' = Passive, 'D' = Deleted. Default is 'A'.",
            "default": "A",
            "enum": ["A", "P", "D"]
          },
          "surname": {
            "maxLength": 50,
            "type": "string",
            "description": "Surname."
          },
          "telephoneNumber": {
            "maxLength": 80,
            "type": "string",
            "description": "Deprecated. Please use countryCode and telephoneNumberNoCountryCode. Telephone number for customer. This should be a cell phone number."
          },
          "telephoneNumberNoCountryCode": {
            "maxLength": 12,
            "type": "string",
            "description": "Telephone number without country code or punctuation."
          },
          "telephoneNumberVerifiedAt": {
            "type": "string",
            "description": "When the telephone number was verified. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "vippsId": {
            "type": "string",
            "description": "Vipps unique user identifier",
            "format": "uuid",
            "example": "c06c4afe-d9e1-4c5d-939a-177d752a0944"
          }
        },
        "description": "A registered customer put request. Required fields are firstName, surname, password, organizationId, changedBy and changedByChannel."
      },
      "CustomerResponse": {
        "required": [
          "changedAt",
          "changedBy",
          "changedByChannel",
          "createdAt",
          "createdBy",
          "createdByChannel",
          "customerNumber",
          "firstName",
          "organisationId",
          "profileType",
          "status",
          "surname",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the customer was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "changedBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who last changed the customer. Either web, app or username of employee. Used for traceability in accordance with GDPR"
          },
          "changedByChannel": {
            "maxLength": 100,
            "type": "string",
            "description": "Which sales channel or system who last changed the customer. Used for traceability in accordance with GDPR"
          },
          "countryCode": {
            "maxLength": 4,
            "type": "string",
            "description": "Telephone number country code, starting with +.",
            "example": "+47"
          },
          "createdAt": {
            "type": "string",
            "description": "When the customer was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "createdBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who created the customer. Either web, app or username of employee. Used for traceability in accordance with GDPR"
          },
          "createdByChannel": {
            "maxLength": 100,
            "type": "string",
            "description": "Which sales channel or system who created the customer. Used for traceability in accordance with GDPR"
          },
          "customerAccountId": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer account id used for account based ticketing",
            "example": "XYZ:CustomerAccount:<uuid>"
          },
          "customerAccounts": {
            "type": "array",
            "description": "Customer accounts used for account based ticketing",
            "items": { "$ref": "#/components/schemas/CustomerAccountResponse" }
          },
          "customerConsents": {
            "type": "array",
            "description": "The legacy consents connected to the customer.",
            "items": { "$ref": "#/components/schemas/CustomerConsent" }
          },
          "customerNumber": {
            "type": "integer",
            "description": "Customer number.",
            "format": "int64"
          },
          "customerRef": {
            "maxLength": 40,
            "type": "string",
            "description": "Optional customer reference. Defaults to customer number if not set."
          },
          "dateOfBirth": { "$ref": "#/components/schemas/LocalDateResponse" },
          "dateOfDeath": { "$ref": "#/components/schemas/LocalDateResponse" },
          "ecardOwnerships": {
            "type": "array",
            "description": "The ecards connected to the customer.",
            "items": { "$ref": "#/components/schemas/EcardOwnershipResponse" }
          },
          "email": {
            "maxLength": 80,
            "type": "string",
            "description": "Contact email. May become different from username"
          },
          "emailOld": {
            "maxLength": 80,
            "type": "string",
            "description": "When customer is deleted (status='D'), the value of 'email' is moved here to allow creation of a new customer with the same email."
          },
          "emailVerifiedAt": {
            "type": "string",
            "description": "When the email was verified. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when the customers personal data should be deleted. Personal data will be deleted continuously. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "description": "First and middle name."
          },
          "givenConsents": {
            "type": "array",
            "description": "The consents connected to the customer. Deprecated",
            "deprecated": true,
            "items": {
              "type": "object",
              "description": "The consents connected to the customer. Deprecated",
              "deprecated": true
            }
          },
          "id": {
            "type": "integer",
            "description": "Customer id. Deprecated",
            "format": "int64",
            "deprecated": true
          },
          "landlineNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Landline telephone number."
          },
          "languagePreference": {
            "type": "string",
            "description": "Deprecated, please use languagePreferenceISO6393. Which language the customer wants information in. Default is 'NO'.",
            "deprecated": true,
            "enum": ["NO", "EN"]
          },
          "languagePreferenceISO6393": {
            "type": "string",
            "description": "Which language the customer wants information in. ISO 639-3 format. Default is 'NOB'.",
            "enum": ["NOB", "NNO", "ENG"]
          },
          "lastSignInAt": {
            "type": "string",
            "description": "When the customer last signed in. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "lastSignInFrom": {
            "maxLength": 100,
            "type": "string",
            "description": "Where the customer last signed in from. Typically web or app. Typically used to display to the user where the last login was performed."
          },
          "nationality": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The customers nationality. ISO 3166-1 alpha-3 format",
            "example": "NOR"
          },
          "notes": {
            "type": "array",
            "description": "Deprecated. The notes connected to the customer.",
            "deprecated": true,
            "items": { "$ref": "#/components/schemas/NoteResponse" }
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation the customer is registered with.",
            "format": "int64"
          },
          "parentId": {
            "type": "object",
            "description": "Id of the parent customer. Used to connect different customer types."
          },
          "personnelTicketBearer": {
            "$ref": "#/components/schemas/PersonnelTicketBearer"
          },
          "postalAddresses": {
            "type": "array",
            "description": "The postal addresses connected to the customer.",
            "items": { "$ref": "#/components/schemas/PostalAddressResponse" }
          },
          "preferences": {
            "type": "array",
            "description": "The preferences connected to the customer.",
            "items": {
              "$ref": "#/components/schemas/CustomerPreferenceResponse"
            }
          },
          "profileType": {
            "type": "string",
            "description": "Type of profile. Types supported: 'S' = Standard customer, 'P' = Personnel ticket customer, 'T' = Temporary customer. Default is 'S'.",
            "enum": ["S", "P", "T"]
          },
          "relatedCustomerNumbers": {
            "type": "array",
            "description": "The customer number of profiles which has been merged into the current profile. These may be used to lookup customer information in other systems",
            "items": {
              "type": "integer",
              "description": "The customer number of profiles which has been merged into the current profile. These may be used to lookup customer information in other systems",
              "format": "int64"
            }
          },
          "status": {
            "type": "string",
            "description": "Customer status. Statuses supported: 'A' = Active, 'P' = Passive, 'D' = Deleted. Default is 'A'.",
            "enum": ["A", "P", "D"]
          },
          "surname": {
            "maxLength": 50,
            "type": "string",
            "description": "Surname."
          },
          "telephoneNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Deprecated. Please use countryCode and telephoneNumberNoCountryCode. Telephone number for customer. This should be a cell phone number."
          },
          "telephoneNumberNoCountryCode": {
            "maxLength": 12,
            "type": "string",
            "description": "Telephone number without country code or punctuation."
          },
          "telephoneNumberVerifiedAt": {
            "type": "string",
            "description": "When the telephone number was verified. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "username": {
            "type": "string",
            "description": "Username the customer can use to log unto their profile. Only available on profile type S(tamkunde) and profile status A(ctive)"
          },
          "uuid": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "A universal unique id for the customer. 32 random alphanumeric characters. Not RFC 4122 compliant",
            "example": "7018222E18CB5C46E05400144FF9F89C"
          },
          "vippsId": {
            "type": "string",
            "description": "Vipps unique user identifier",
            "format": "uuid"
          }
        },
        "description": "A registered customer response"
      },
      "EcardOwnershipRequest": {
        "required": ["ecardNumber", "ecardOperator", "startOfOwnership"],
        "type": "object",
        "properties": {
          "bookingDate": {
            "type": "string",
            "description": "When the physical ecard was booked. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "ecardName": {
            "maxLength": 100,
            "type": "string",
            "description": "Customer defined ecard alias."
          },
          "ecardNumber": {
            "type": "integer",
            "description": "Ecard number.",
            "format": "int64"
          },
          "ecardNumber16digits": {
            "maxLength": 16,
            "minLength": 16,
            "type": "string",
            "description": "The 16 digit ecard number. A combination of ecardNumber, ecardOperator and control digit."
          },
          "ecardOperator": {
            "type": "integer",
            "description": "Ecard operator.",
            "format": "int32"
          },
          "endOfOwnership": {
            "type": "string",
            "description": "When the customer removed the ecard connection. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "expirationDate": {
            "type": "string",
            "description": "When the physical ecard expires. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "shippingDate": {
            "type": "string",
            "description": "When the physical ecard was shipped to the customer. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "startOfOwnership": {
            "type": "string",
            "description": "When the ecard was first connected to the customer. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          }
        },
        "description": "Ecards connected to a customer"
      },
      "EcardOwnershipResponse": {
        "required": [
          "changedAt",
          "createdAt",
          "customerId",
          "ecardNumber",
          "ecardNumber16digits",
          "ecardOperator",
          "id",
          "startOfOwnership"
        ],
        "type": "object",
        "properties": {
          "bookingDate": {
            "type": "string",
            "description": "When the physical ecard was booked. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "changedAt": {
            "type": "string",
            "description": "When the ecard was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "createdAt": {
            "type": "string",
            "description": "When the ecard was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "customerId": {
            "type": "integer",
            "description": "The customer connected to the ecard. Deprecated",
            "format": "int64",
            "deprecated": true
          },
          "ecardName": {
            "maxLength": 100,
            "type": "string",
            "description": "Customer defined ecard alias."
          },
          "ecardNumber": {
            "type": "integer",
            "description": "Ecard number.",
            "format": "int64"
          },
          "ecardNumber16digits": {
            "maxLength": 16,
            "minLength": 16,
            "type": "string",
            "description": "The 16 digit ecard number. A combination of ecardNumber, ecardOperator and control digit."
          },
          "ecardOperator": {
            "type": "integer",
            "description": "Ecard operator.",
            "format": "int32"
          },
          "endOfOwnership": {
            "type": "string",
            "description": "When the customer removed the ecard connection. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "expirationDate": {
            "type": "string",
            "description": "When the physical ecard expires. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "id": {
            "type": "integer",
            "description": "Ecard id.",
            "format": "int64"
          },
          "shippingDate": {
            "type": "string",
            "description": "When the physical ecard was shipped to the customer. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "startOfOwnership": {
            "type": "string",
            "description": "When the ecard was first connected to the customer. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          }
        },
        "description": "Ecards connected to a customer"
      },
      "ErrorMessage": {
        "required": [
          "errorCode",
          "longEnglish",
          "longNorwegian",
          "shortEnglish",
          "shortNorwegian"
        ],
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "integer",
            "description": "The error code.",
            "format": "int32"
          },
          "longEnglish": {
            "type": "string",
            "description": "Long error message (English)."
          },
          "longNorwegian": {
            "type": "string",
            "description": "Long error message (Norwegian)."
          },
          "shortEnglish": {
            "type": "string",
            "description": "Short error message (English)."
          },
          "shortNorwegian": {
            "type": "string",
            "description": "Short error message (Norwegian)."
          }
        },
        "description": "An Error message. "
      },
      "GeneratePasswordResponse": {
        "required": [
          "customerNumber",
          "firstName",
          "generatedPassword",
          "organisationId",
          "surname"
        ],
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "integer",
            "description": "Customer number.",
            "format": "int64"
          },
          "customerRef": {
            "maxLength": 40,
            "type": "string",
            "description": "Customer reference"
          },
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "description": "Customer first and middle name."
          },
          "generatedPassword": {
            "maxLength": 100,
            "type": "string",
            "description": "The new generated password."
          },
          "organisationId": {
            "type": "integer",
            "description": "Organisation id.",
            "format": "int64"
          },
          "surname": {
            "maxLength": 50,
            "type": "string",
            "description": "Customer surname."
          },
          "telephoneNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Telephone number for customer. This should be a cell phone number."
          }
        },
        "description": "Return object when generating a new password"
      },
      "ListCustomerAccountResponse": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CustomerAccountResponse" }
      },
      "ListCustomerPreferenceRequest": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CustomerPreferenceRequest" }
      },
      "ListCustomerPreferenceResponse": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CustomerPreferenceResponse" }
      },
      "ListCustomerResponse": {
        "type": "array",
        "items": { "$ref": "#/components/schemas/CustomerResponse" }
      },
      "LocalDateResponse": {
        "required": ["day", "month", "year"],
        "type": "object",
        "properties": {
          "day": {
            "type": "integer",
            "description": "day of month",
            "format": "int32"
          },
          "month": {
            "type": "integer",
            "description": "month number",
            "format": "int32"
          },
          "year": {
            "type": "integer",
            "description": "year",
            "format": "int32"
          }
        },
        "description": "Date as object"
      },
      "NewPasswordRequest": {
        "required": ["newPassword"],
        "type": "object",
        "properties": {
          "newPassword": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "The new password."
          },
          "validationErrors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ErrorMessage" }
          }
        },
        "description": "The fields used for creating a new password for an user"
      },
      "NoteResponse": {
        "required": [
          "changedAt",
          "changedBy",
          "createdAt",
          "createdBy",
          "customerId",
          "id",
          "text"
        ],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the note was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "changedBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who last changed the note."
          },
          "createdAt": {
            "type": "string",
            "description": "When the note was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "createdBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who created the note."
          },
          "customerId": {
            "type": "integer",
            "description": "Id of the customer connected to the note.",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "description": "Note id.",
            "format": "int64"
          },
          "text": {
            "maxLength": 4000,
            "type": "string",
            "description": "Note content."
          }
        },
        "description": "Deprecated"
      },
      "PageCustomerResponse": {
        "required": ["items", "totalItems", "totalPages"],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "Items on a specific page",
            "items": { "$ref": "#/components/schemas/CustomerResponse" }
          },
          "totalItems": {
            "type": "integer",
            "description": "Total number of items",
            "format": "int64",
            "example": 72
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages available to browse",
            "format": "int64",
            "example": 9
          }
        },
        "description": "Page displays a subset of a list of entities"
      },
      "PersonnelTicketBearer": {
        "type": "object",
        "properties": {
          "bearerCustomerId": { "type": "integer", "format": "int64" },
          "changedAt": { "type": "string", "format": "date-time" },
          "createdAt": { "type": "string", "format": "date-time" },
          "isSelfServedRetrieval": { "type": "boolean" },
          "ticketRightBearer": { "type": "string" },
          "ticketRightOwner": { "type": "string" }
        },
        "description": "The personnel tickets connected to the customer. Deprecated. Does not contain updated information."
      },
      "PostalAddressRequest": {
        "required": ["countryCode", "postCode", "town", "typeOfAddress"],
        "type": "object",
        "properties": {
          "addressLine1": {
            "maxLength": 80,
            "type": "string",
            "description": "Address line 1."
          },
          "addressLine2": {
            "maxLength": 80,
            "type": "string",
            "description": "Address line 2, often used for c/o information."
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The address country code. ISO 3166-1 alpha-3 format",
            "example": "NOR"
          },
          "id": {
            "type": "integer",
            "description": "Unique id for postal address. This value is exclusively used when updating a full customer, to identify which of the addresses to update. Otherwise it is ignored.",
            "format": "int64"
          },
          "postCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The address post code. Only 4 digits for Norwegian addresses."
          },
          "town": {
            "type": "string",
            "description": "The address post town. Will be required"
          },
          "typeOfAddress": {
            "type": "string",
            "description": "The type of address. Types supported: 'P' = Private, 'I' = Invoice, 'S' = Shadow.",
            "enum": ["P", "I", "S"]
          },
          "verifiedAt": {
            "type": "string",
            "description": "When the address was verified. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          }
        },
        "description": "Postal address connected to a customer"
      },
      "PostalAddressResponse": {
        "required": [
          "changedAt",
          "countryCode",
          "createdAt",
          "customerId",
          "id",
          "postCode",
          "town",
          "typeOfAddress"
        ],
        "type": "object",
        "properties": {
          "addressLine1": {
            "maxLength": 80,
            "type": "string",
            "description": "Address line 1."
          },
          "addressLine2": {
            "maxLength": 80,
            "type": "string",
            "description": "Address line 2, often used for c/o information."
          },
          "changedAt": {
            "type": "string",
            "description": "When the postal address was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "countryCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The address country code. ISO 3166-1 alpha-3 format",
            "example": "NOR"
          },
          "createdAt": {
            "type": "string",
            "description": "When the postal address was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "customerId": {
            "type": "integer",
            "description": "The customer connected to the address.",
            "format": "int64"
          },
          "id": {
            "type": "integer",
            "description": "Postal address id.",
            "format": "int64"
          },
          "postCode": {
            "maxLength": 10,
            "type": "string",
            "description": "The address post code."
          },
          "town": {
            "maxLength": 50,
            "type": "string",
            "description": "The address post town."
          },
          "typeOfAddress": {
            "type": "string",
            "description": "The type of address. Types supported: 'P' = Private, 'I' = Invoice, 'S' = Shadow.",
            "enum": ["P", "I", "S"]
          },
          "verifiedAt": {
            "type": "string",
            "description": "When the address was verified. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          }
        },
        "description": "Postal address connected to a customer"
      },
      "PreferenceRequest": {
        "required": [
          "isActive",
          "preferenceCode",
          "preferenceDescription",
          "preferenceType"
        ],
        "type": "object",
        "properties": {
          "isActive": {
            "type": "boolean",
            "description": "Whether the preference is active."
          },
          "preferenceCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The preference code."
          },
          "preferenceDescription": {
            "maxLength": 255,
            "type": "string",
            "description": "A description of the preference."
          },
          "preferenceType": {
            "maxLength": 20,
            "type": "string",
            "description": "Type of preference."
          }
        },
        "description": "Preference"
      },
      "PreferenceResponse": {
        "required": [
          "changedAt",
          "createdAt",
          "id",
          "isActive",
          "preferenceCode",
          "preferenceDescription",
          "preferenceType"
        ],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the preference was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "createdAt": {
            "type": "string",
            "description": "When the preference was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "id": {
            "type": "integer",
            "description": "Preference id.",
            "format": "int64"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the preference is active."
          },
          "preferenceCode": {
            "maxLength": 20,
            "type": "string",
            "description": "The preference code."
          },
          "preferenceDescription": {
            "maxLength": 255,
            "type": "string",
            "description": "A description of the preference."
          },
          "preferenceType": {
            "maxLength": 20,
            "type": "string",
            "description": "Type of preference."
          }
        },
        "description": "Preference"
      },
      "ProfilesBulkRequest": {
        "type": "object",
        "properties": {
          "customerNumbers": {
            "type": "array",
            "description": "Customer numbers to look up. Max 1000 numbers at a time.",
            "items": {
              "type": "integer",
              "description": "Customer numbers to look up. Max 1000 numbers at a time.",
              "format": "int64"
            }
          },
          "customerReferences": {
            "type": "array",
            "description": "Customer references (aka external references) to look up. Will not be used if non-empty list of customer numbers is provided. Max 1000 references at a time.",
            "items": {
              "type": "string",
              "description": "Customer references (aka external references) to look up. Will not be used if non-empty list of customer numbers is provided. Max 1000 references at a time."
            }
          },
          "includePreferences": {
            "type": "boolean",
            "description": "Optional flag to include profile preferences"
          }
        },
        "description": "A request for multiple customers."
      },
      "TemporaryCustomerPostRequest": {
        "required": ["createdBy", "createdByChannel", "expirationDate"],
        "type": "object",
        "properties": {
          "countryCode": {
            "maxLength": 4,
            "type": "string",
            "description": "Telephone number country code, starting with +.",
            "example": "+47"
          },
          "createdBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who created the customer. Either web, app or username of employee. Used for traceability in accordance with GDPR"
          },
          "createdByChannel": {
            "maxLength": 100,
            "type": "string",
            "description": "Which sales channel or system who created the customer. Used for traceability in accordance with GDPR"
          },
          "customerAccountId": {
            "maxLength": 60,
            "type": "string",
            "description": "Deprecated. Use /profiles/{customerNumber}/customer-accounts. Customer account id used for account based ticketing",
            "example": "XYZ:CustomerAccount:<uuid>",
            "deprecated": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth. ISO 8601 date format",
            "format": "date",
            "example": "2019-04-05"
          },
          "email": {
            "maxLength": 80,
            "type": "string",
            "description": "Contact email"
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when the customers personal data should be deleted. Personal data will be deleted continuously. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "description": "First and middle name."
          },
          "landlineNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Landline telephone number."
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation the customer is registered with.",
            "format": "int64"
          },
          "surname": {
            "maxLength": 50,
            "type": "string",
            "description": "Surname."
          },
          "telephoneNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Deprecated. Please use countryCode and telephoneNumberNoCountryCode. Telephone number for customer. This should be a cell phone number."
          },
          "telephoneNumberNoCountryCode": {
            "maxLength": 12,
            "type": "string",
            "description": "Telephone number without country code or punctuation."
          }
        },
        "description": "A registered customer. Required fields are expirationDate, createdBy and createdByChannel."
      },
      "TemporaryCustomerPutRequest": {
        "required": ["changedBy", "changedByChannel", "expirationDate"],
        "type": "object",
        "properties": {
          "changedBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who last changed the customer. Either web, app or username of employee. Used for traceability in accordance with GDPR"
          },
          "changedByChannel": {
            "maxLength": 100,
            "type": "string",
            "description": "Which sales channel or system who last changed the customer. Used for traceability in accordance with GDPR"
          },
          "countryCode": {
            "maxLength": 4,
            "type": "string",
            "description": "Telephone number country code, starting with +.",
            "example": "+47"
          },
          "customerAccountId": {
            "maxLength": 60,
            "type": "string",
            "description": "Deprecated. Use /profiles/{customerNumber}/customer-accounts. Customer account id used for account based ticketing",
            "example": "XYZ:CustomerAccount:<uuid>",
            "deprecated": true
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth. ISO 8601 date format",
            "format": "date",
            "example": "2019-04-05"
          },
          "email": {
            "maxLength": 80,
            "type": "string",
            "description": "Contact email"
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when the customers personal data should be deleted. Personal data will be deleted continuously. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "description": "First and middle name."
          },
          "landlineNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Landline telephone number."
          },
          "surname": {
            "maxLength": 50,
            "type": "string",
            "description": "Surname."
          },
          "telephoneNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Deprecated. Please use countryCode and telephoneNumberNoCountryCode. Telephone number for customer. This should be a cell phone number."
          },
          "telephoneNumberNoCountryCode": {
            "maxLength": 12,
            "type": "string",
            "description": "Telephone number without country code or punctuation."
          }
        },
        "description": "A registered customer"
      },
      "TemporaryCustomerResponse": {
        "required": [
          "changedAt",
          "changedBy",
          "changedByChannel",
          "createdAt",
          "createdBy",
          "createdByChannel",
          "customerNumber",
          "expirationDate",
          "firstName",
          "organisationId",
          "status",
          "surname",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the customer was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "changedBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who last changed the customer. Either web, app or username of employee. Used for traceability in accordance with GDPR"
          },
          "changedByChannel": {
            "maxLength": 100,
            "type": "string",
            "description": "Which sales channel or system who last changed the customer. Used for traceability in accordance with GDPR"
          },
          "countryCode": {
            "maxLength": 4,
            "type": "string",
            "description": "Telephone number country code, starting with +.",
            "example": "+47"
          },
          "createdAt": {
            "type": "string",
            "description": "When the customer was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "createdBy": {
            "maxLength": 100,
            "type": "string",
            "description": "Who created the customer. Either web, app or username of employee. Used for traceability in accordance with GDPR"
          },
          "createdByChannel": {
            "maxLength": 100,
            "type": "string",
            "description": "Which sales channel or system who created the customer. Used for traceability in accordance with GDPR"
          },
          "customerAccountId": {
            "maxLength": 60,
            "type": "string",
            "description": "Customer account id used for account based ticketing",
            "example": "XYZ:CustomerAccount:<uuid>"
          },
          "customerConsents": {
            "type": "array",
            "description": "The legacy consents connected to the customer.",
            "items": { "$ref": "#/components/schemas/CustomerConsent" }
          },
          "customerNumber": {
            "type": "integer",
            "description": "Customer number.",
            "format": "int64"
          },
          "customerRef": {
            "maxLength": 40,
            "type": "string",
            "description": "Optional customer reference. Defaults to customer number if not set."
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth. ISO 8601 date format",
            "format": "date",
            "example": "2019-04-05"
          },
          "dateOfDeath": {
            "type": "string",
            "description": "Date of death. ISO 8601 date format",
            "format": "date",
            "example": "2019-04-05"
          },
          "email": {
            "maxLength": 80,
            "type": "string",
            "description": "Contact email."
          },
          "emailOld": {
            "maxLength": 80,
            "type": "string",
            "description": "When customer is deleted (status='D'), the value of 'email' is moved here to allow creation of a new customer with the same email."
          },
          "emailVerifiedAt": {
            "type": "string",
            "description": "When the email was verified. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "expirationDate": {
            "type": "string",
            "description": "The date when the customers personal data should be deleted. Personal data will be deleted continuously. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "firstName": {
            "maxLength": 50,
            "type": "string",
            "description": "First and middle name."
          },
          "givenConsents": {
            "type": "array",
            "description": "The consents connected to the customer. Deprecated",
            "deprecated": true,
            "items": {
              "type": "object",
              "description": "The consents connected to the customer. Deprecated",
              "deprecated": true
            }
          },
          "landlineNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Landline telephone number."
          },
          "nationality": {
            "maxLength": 3,
            "type": "string",
            "description": "The customers nationality. ISO 3166-1 alpha-3 format",
            "example": "NOR"
          },
          "notes": {
            "type": "array",
            "description": "The notes connected to the customer.",
            "items": { "$ref": "#/components/schemas/NoteResponse" }
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation the customer is registered with.",
            "format": "int64"
          },
          "postalAddresses": {
            "type": "array",
            "description": "The postal addresses connected to the customer.",
            "items": { "$ref": "#/components/schemas/PostalAddressResponse" }
          },
          "preferences": {
            "type": "array",
            "description": "The preferences connected to the customer.",
            "items": {
              "$ref": "#/components/schemas/CustomerPreferenceResponse"
            }
          },
          "status": {
            "type": "string",
            "description": "Customer status. Statuses supported: 'A' = Active, 'P' = Passive, 'D' = Deleted. Default is 'A'.",
            "enum": ["A", "P", "D"]
          },
          "surname": {
            "maxLength": 50,
            "type": "string",
            "description": "Surname."
          },
          "telephoneNumber": {
            "maxLength": 20,
            "type": "string",
            "description": "Deprecated. Please use countryCode and telephoneNumberNoCountryCode. Telephone number for customer. This should be a cell phone number."
          },
          "telephoneNumberNoCountryCode": {
            "maxLength": 12,
            "type": "string",
            "description": "Telephone number without country code or punctuation."
          },
          "telephoneNumberVerifiedAt": {
            "type": "string",
            "description": "When the telephone number was verified. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "uuid": {
            "maxLength": 32,
            "minLength": 32,
            "type": "string",
            "description": "A universal unique id for the customer. 32 random alphanumeric characters. Not RFC 4122 compliant",
            "example": "7018222E18CB5C46E05400144FF9F89C"
          }
        },
        "description": "A registered customer"
      },
      "VerifyCredentialsRequest": {
        "required": ["email", "password"],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 80,
            "type": "string",
            "description": "Email used for login. See property 'username' on CustomerResponse"
          },
          "lastSignInFrom": {
            "maxLength": 100,
            "type": "string",
            "description": "The place if login. Typically web or app. Typically used to display to the user where the last login was performed."
          },
          "password": {
            "maxLength": 100,
            "minLength": 1,
            "type": "string",
            "description": "Password used for login."
          },
          "validationErrors": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/ErrorMessage" }
          }
        },
        "description": "The fields used when verifying credentials"
      },
      "Actor": {
        "required": ["email", "posId"],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Salesperson email",
            "example": "test@test.no"
          },
          "posId": {
            "type": "integer",
            "description": "PosId of salespoint",
            "format": "int64",
            "example": 123678007
          }
        },
        "description": "Identifies the creator of the transaction."
      },
      "BlockedCustomerResponse": {
        "required": ["blocked", "customerNumber"],
        "type": "object",
        "properties": {
          "blocked": { "type": "boolean" },
          "customerNumber": { "type": "integer", "format": "int64" }
        }
      },
      "ConsumerPatchRequest": {
        "type": "object",
        "properties": {
          "isBlocked": {
            "type": "boolean",
            "description": "Whether the consumer is blocked from consuming the contract"
          }
        },
        "description": "Alter the properties of a Contract Consumer. Only some fields are available."
      },
      "ContractConsumerRequest": {
        "required": ["customerNumber", "customerOrganisationId"],
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "integer",
            "description": "The customer entitled to use the contract. Unique Entur specific number",
            "format": "int64"
          },
          "customerOrganisationId": {
            "type": "integer",
            "description": "The id of the organisation the customer belongs to",
            "format": "int64"
          },
          "customerRef": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The customer entitled to use the contract. External reference unique to organisation"
          },
          "isContractHolder": {
            "type": "boolean",
            "description": "If the customer owns the contract and is the contract holder"
          },
          "policyValidationProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Provided properties from the customer object used to verify the contract claim",
              "example": "{\"surname\":\"customer\"}"
            },
            "description": "Provided properties from the customer object used to verify the contract claim",
            "example": { "surname": "customer" }
          }
        },
        "description": "Add contract consumer to a contract"
      },
      "ContractConsumerResponse": {
        "required": [
          "createdAt",
          "createdBy",
          "customerNumber",
          "customerOrganisationId",
          "isBlocked",
          "isContractHolder",
          "lastChangedAt",
          "lastChangedBy"
        ],
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "When the contract consumer was created",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "createdBy": {
            "type": "string",
            "description": "Which client created the contract consumer",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "customerNumber": {
            "type": "integer",
            "description": "The customer entitled to use the contract. Unique Entur specific number",
            "format": "int64",
            "example": 122334
          },
          "customerOrganisationId": {
            "type": "integer",
            "description": "The organisation ID the customer belongs to",
            "format": "int64",
            "example": 42
          },
          "customerRef": {
            "type": "string",
            "description": "The customer entitled to use the contract. External reference unique to organisation",
            "example": "073R41D4R"
          },
          "isBlocked": {
            "type": "boolean",
            "description": "Marks that this specific user has been disallowed from using this contract by the contract owner",
            "example": true
          },
          "isContractHolder": {
            "type": "boolean",
            "description": "Marks that this specific user's organisation is the owner of the contract",
            "example": true
          },
          "lastChangedAt": {
            "type": "string",
            "description": "When the contract consumer was last changed",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "lastChangedBy": {
            "type": "string",
            "description": "Which client changed the contract consumer last",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "description": "A description of the customer that's allowed to use the contract"
      },
      "ContractConsumption": {
        "required": [
          "contractUuid",
          "customerNumber",
          "entitlementProductId",
          "firstTravelDate"
        ],
        "type": "object",
        "properties": {
          "contractUuid": {
            "type": "string",
            "description": "The id of the contract consumed",
            "format": "uuid",
            "example": "cae8853a-583e-49af-be61-cf10875a541d"
          },
          "coupons": {
            "type": "integer",
            "description": "The number of coupons consumed. Has no effect if the contract does not specify a number of available coupons. Defaults to 1.",
            "format": "int64",
            "example": 1
          },
          "customerNumber": {
            "type": "integer",
            "description": "The customer attempting to consume the contract",
            "format": "int64",
            "example": 123415
          },
          "entitlementProductId": {
            "type": "string",
            "description": "The id of the product consumed. This is on NetEX format and must match the product in use by the supplied contract.",
            "example": "ENT:TravelRebate:A2"
          },
          "entitlementProductVersion": {
            "type": "string",
            "description": "The version of the product consumed. This is on NetEX format and if supplied must match the product version in use by the supplied contract.",
            "example": "ENT:Version:V1"
          },
          "firstTravelDate": {
            "type": "string",
            "description": "The first day of travel.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "lastTravelDate": {
            "type": "string",
            "description": "The last day of travel. Defaults to same day as the first day of travel.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Contract consumption details"
      },
      "ContractPatchRequest": {
        "type": "object",
        "properties": {
          "consumableFrom": {
            "type": "string",
            "description": "If set, the date the contract can be used from",
            "format": "date-time"
          },
          "couponsLimit": {
            "type": "integer",
            "description": "If set, new contract coupons limit. Please note that it is not possible to decrease the limit",
            "format": "int64"
          },
          "expirationDate": {
            "type": "string",
            "description": "If set, the date the contract expires and can no longer be used",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "If set, the contract status will be changed accordingly. Please note that is is only possible to alter status between VALID and CANCELLED. The parameter value is case-sensitive.",
            "enum": ["CANCELLED", "VALID"]
          }
        }
      },
      "ContractRequest": {
        "required": ["consumableFrom"],
        "type": "object",
        "properties": {
          "acceptanceDate": {
            "type": "string",
            "description": "When the contract was accepted by the customer",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "consumableFrom": {
            "type": "string",
            "description": "From when the contract can be consumed",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "couponsLimit": {
            "type": "integer",
            "description": "How many coupons the contract has. Default is cascaded from Loyalty Program Version. If set, the contract will be blocked for usage when all coupons are used. Coupons are registered via an OrderLineEvent.",
            "format": "int64",
            "example": 10
          },
          "customerNumber": {
            "type": "integer",
            "description": "The customer entitled to use the contract. Unique Entur specific number",
            "format": "int64",
            "example": 123415
          },
          "customerRef": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The customer entitled to use the contract. External reference unique to organisation"
          },
          "expirationDate": {
            "type": "string",
            "description": "Expiration date. ISO format. If the loyalty program has defined a usageValidityPeriod, the smallest value of expirationDate and consumableFrom + usageValidityPeriod will be used",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "externalRef": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "Optional external reference. Examples are membership number and employee number",
            "example": "123415A"
          },
          "policies": {
            "type": "array",
            "description": "Policy restricting who can claim the contract. Every item in the policy map must match the customer exactly. Values are hashed on storage.",
            "items": { "$ref": "#/components/schemas/PolicyRequest" }
          }
        },
        "description": "A contract request to create a new contract"
      },
      "ContractResponse": {
        "required": [
          "consumableFrom",
          "createdAt",
          "createdBy",
          "lastChangedAt",
          "lastChangedBy",
          "loyaltyProgram",
          "organisationId",
          "status",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "acceptanceDate": {
            "type": "string",
            "description": "When the contract was accepted by the customer",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "consumableFrom": {
            "type": "string",
            "description": "From when the contract can be consumed",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "contractConsumers": {
            "type": "array",
            "description": "The list of customers allowed to use the contract",
            "items": { "$ref": "#/components/schemas/ContractConsumerResponse" }
          },
          "couponsLimit": {
            "type": "integer",
            "description": "How many coupons the contract has. Default is cascaded from Loyalty Program Version. If set, the contract will be blocked for usage when all coupons are used. Coupons are registered via an OrderLineEvent.",
            "format": "int64",
            "example": 10
          },
          "createdAt": {
            "type": "string",
            "description": "When the contract was created",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "createdBy": {
            "type": "string",
            "description": "Which client created the contract",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "currentTotal": { "$ref": "#/components/schemas/TotalAmount" },
          "expirationDate": {
            "type": "string",
            "description": "When the contract expires",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "externalRef": {
            "type": "string",
            "description": "Optional external reference. Examples are membership number and employee number",
            "example": "123415A"
          },
          "lastChangedAt": {
            "type": "string",
            "description": "When the contract was last changed",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "lastChangedBy": {
            "type": "string",
            "description": "Which client changed the contract last",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "loyaltyProgram": {
            "$ref": "#/components/schemas/LoyaltyProgramFlatResponse"
          },
          "orderLineEvents": {
            "type": "array",
            "description": "A list of order line events related to this contract",
            "items": { "$ref": "#/components/schemas/OrderLineEventResponse" }
          },
          "organisationId": {
            "type": "integer",
            "description": "Which organisation the contract concerns",
            "format": "int64",
            "example": 1
          },
          "parent": {
            "type": "string",
            "description": "If present, contract UUID of the parent contract. This field is usually set if the contract is created by a coupon usage, whereas this contract has a time constraint and the parent has a coupon constraint.",
            "example": "fd29908d-a2ae-4fe0-8e10-7f0db437c554"
          },
          "policies": {
            "type": "array",
            "description": "The list of keys validated against the customer claiming the contract",
            "items": { "$ref": "#/components/schemas/PolicyResponse" }
          },
          "remainingCoupons": {
            "type": "integer",
            "description": "The remaining coupons for coupon based contracts. Derived from couponsLimit and orderLineEvents. The amount of remaining coupons are counted yearly and based of the earliest travel date.",
            "format": "int64"
          },
          "status": {
            "type": "string",
            "description": "The contract status. A normal contract has status valid. It can be expired, refunded, cancelled, misused and valid ",
            "example": "Refunded"
          },
          "subContracts": {
            "type": "array",
            "description": "If present, contains timed contracts that are dependent on this contract. See Contract response",
            "items": { "type": "object" }
          },
          "transactions": {
            "type": "array",
            "description": "The list of transactions for this contract (earn/burn or giftcard)",
            "items": { "$ref": "#/components/schemas/TransactionResponse" }
          },
          "uuid": {
            "type": "string",
            "description": "Unique contract identifier",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "description": "A contract between a customer and an organisation"
      },
      "ContractTransactionRequest": {
        "required": ["change"],
        "type": "object",
        "properties": {
          "actor": { "$ref": "#/components/schemas/Actor" },
          "change": { "$ref": "#/components/schemas/TotalAmountRequest" },
          "orderId": {
            "type": "string",
            "description": "Id of order this transaction pertains to. Either, what we are paying for or where the money are being paid.",
            "example": "4SAD34HG"
          },
          "rrn": {
            "type": "string",
            "description": "common RRN for monetary transactions. This is used for tracking money as they are sent across the systems.",
            "example": "1234567890"
          },
          "transactionId": {
            "type": "string",
            "description": "External transaction ID for this transaction. This is stored for future audits, so the money can be tracked. The value can be up to 40 characters in length.",
            "example": "1927bd54-4cc4"
          }
        }
      },
      "ContractTransactionResponse": {
        "required": [
          "contractUuid",
          "currentTotal",
          "transactionId",
          "transactions"
        ],
        "type": "object",
        "properties": {
          "contractUuid": {
            "type": "string",
            "description": "Unique contract identifier",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "currentTotal": { "$ref": "#/components/schemas/TotalAmount" },
          "transactionId": {
            "type": "string",
            "description": "External transaction ID for this transaction."
          },
          "transactions": {
            "type": "array",
            "description": "The list of transactions for this contract (earn/burn or giftcard)",
            "items": { "$ref": "#/components/schemas/TransactionResponse" }
          }
        },
        "description": "Transaction information along with basic contract information"
      },
      "CouponConfigRequest": {
        "required": ["defaultQuantity", "loyaltyProgramId"],
        "type": "object",
        "properties": {
          "defaultQuantity": {
            "type": "integer",
            "description": "Default number of how many coupons can be used. May be overridden by contract coupon limit",
            "format": "int64"
          },
          "defaultStartTime": {
            "type": "string",
            "description": "The default start time of the contract created by a coupon usage. If set, the contract created by a coupon usage will start on the specified time of the travel date or when created",
            "format": "time"
          },
          "loyaltyProgramId": {
            "type": "integer",
            "description": "The loyalty program the contract created by the coupon is connected to",
            "format": "int64"
          },
          "usageValidityPeriod": {
            "type": "string",
            "description": "The duration of the of the contract created by a coupon usage. If set, the contract created by a coupon usage will set expiration date to the end of the duration. It will override loyalty program usageValidityPeriod",
            "format": "duration",
            "example": "P3DT12H30M5S"
          }
        },
        "description": "Configuration for coupons"
      },
      "CouponConfigResponse": {
        "required": ["defaultQuantity", "loyaltyProgramId"],
        "type": "object",
        "properties": {
          "defaultQuantity": {
            "type": "integer",
            "description": "Default number of how many coupons can be used. May be overridden by contract coupon limit",
            "format": "int64"
          },
          "defaultStartTime": {
            "type": "string",
            "description": "The default start time of the contract created by a coupon usage. If set, the contract created by a coupon usage will start on the specified time of the travel date or when created",
            "format": "time"
          },
          "loyaltyProgramId": {
            "type": "integer",
            "description": "The loyalty program the contract created by the coupon is connected to",
            "format": "int64"
          },
          "usageValidityPeriod": {
            "type": "string",
            "description": "The duration of the of the contract created by a coupon usage. If set, the contract created by a coupon usage will set expiration date to the end of the duration. It will override loyalty program usageValidityPeriod",
            "format": "duration",
            "example": "P3DT12H30M5S"
          }
        },
        "description": "Configuration for coupons. This is only set for loyalty program type COUPONS"
      },
      "ErrorResponse": {
        "required": [
          "correlationId",
          "error",
          "message",
          "path",
          "status",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "correlationId": {
            "type": "string",
            "description": "The unique correlation id for the request.",
            "example": "b5d4960d-7ab2-43d6-a8f3-113da042a288"
          },
          "error": {
            "type": "string",
            "description": "The http status reason.",
            "example": "Bad request"
          },
          "errorCode": {
            "type": "string",
            "description": "Application specific error code",
            "example": "1033"
          },
          "errors": {
            "type": "array",
            "description": "Optional list of error specifications.",
            "items": { "$ref": "#/components/schemas/ErrorSpecification" }
          },
          "message": {
            "type": "string",
            "description": "The main error message.",
            "example": "Validation failed for ..."
          },
          "path": {
            "type": "string",
            "description": "The request URI.",
            "example": "/loyaltyPrograms"
          },
          "status": {
            "type": "integer",
            "description": "The http status code.",
            "format": "int32",
            "example": 400
          },
          "timestamp": {
            "type": "string",
            "description": "When the error occurred.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "Response object for errors occurring in the customers API"
      },
      "ErrorSpecification": {
        "required": ["defaultMessage", "field"],
        "type": "object",
        "properties": {
          "defaultMessage": {
            "type": "string",
            "description": "The message explaining why the error occurred."
          },
          "field": {
            "type": "string",
            "description": "The field of the associated object in the request related to the error."
          },
          "rejectedValues": {
            "type": "object",
            "description": "A list of rejected values."
          }
        },
        "description": "Optional list of error specifications."
      },
      "ExpiredPointContract": {
        "required": [
          "amount",
          "contractUUID",
          "expirationDate",
          "organisationId"
        ],
        "type": "object",
        "properties": {
          "amount": { "pattern": "-?\\d*\\.\\d\\d", "type": "string" },
          "contractUUID": { "type": "string", "format": "uuid" },
          "expirationDate": {
            "type": "string",
            "format": "date",
            "example": "2023-01-01"
          },
          "organisationId": { "type": "integer", "format": "int64" }
        }
      },
      "GeneratePickupCodeResponse": {
        "required": ["contractUuid", "generatedAt", "pickupCode"],
        "type": "object",
        "properties": {
          "contractUuid": {
            "type": "string",
            "description": "Unique contract identifier",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "generatedAt": {
            "type": "string",
            "description": "The timestamp when the code was generated. ISO 8601",
            "format": "date-time",
            "example": "2020-12-03T10:15:30+01:00"
          },
          "pickupCode": {
            "type": "string",
            "description": "The generated pickup code",
            "example": "AAAAA-BBBBB-CCCCC"
          }
        },
        "description": "The result from generating a pickup code for a contract. Code can not be recovered if this response is lost"
      },
      "GiftCardPDFRequest": {
        "required": ["giftCardCode"],
        "type": "object",
        "properties": {
          "giftCardCode": {
            "type": "string",
            "description": "The gift card code used for payments with gift cards",
            "example": "1234-4321-1234"
          },
          "receiverName": {
            "type": "string",
            "description": "The name of the gift card receiver",
            "example": "Ola Nordmann"
          }
        }
      },
      "GiftCardResponse": {
        "required": ["contract", "currentTotal"],
        "type": "object",
        "properties": {
          "contract": { "$ref": "#/components/schemas/ContractResponse" },
          "currentTotal": { "$ref": "#/components/schemas/TotalAmount" },
          "giftCardCode": {
            "type": "string",
            "description": "The human-readable code for the card. This is usually only ever available once during creation. Once the creation process is done, there is no way to find this as it is stored encrypted. This is only returned when creating a new gift card.",
            "example": "AASSD-2345V-WWXXF"
          }
        }
      },
      "GiftCardTransactionResponse": {
        "required": ["changedAt", "contract", "newTotal"],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "Time of last change to this gift card.",
            "format": "date-time"
          },
          "contract": { "$ref": "#/components/schemas/ContractResponse" },
          "newTotal": { "$ref": "#/components/schemas/TotalAmount" },
          "transactionId": {
            "type": "string",
            "description": "External transaction ID for this transaction."
          }
        }
      },
      "LoyaltyProgramDescriptionRequest": {
        "required": ["description", "languageCode"],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Loyalty program description. Supports any kind of text",
            "example": "Reis Kundekort gir deg 20% rabatt på alle kjøp"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for loyalty program",
            "example": "Reis Kundekort"
          },
          "languageCode": {
            "maxLength": 3,
            "minLength": 3,
            "type": "string",
            "description": "The languageCode. The required standard is ISO-639-3 which requires a three letter code.",
            "example": "ENG,NOB"
          }
        },
        "description": "Create or update a description of a loyalty program version"
      },
      "LoyaltyProgramDescriptionResponse": {
        "required": [
          "createdAt",
          "createdBy",
          "description",
          "languageCode",
          "lastChangedAt",
          "lastChangedBy"
        ],
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "description": "When the loyalty program was created",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "createdBy": {
            "type": "string",
            "description": "Which client created the loyalty program",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "description": {
            "type": "string",
            "description": "Loyalty program description. Supports any kind of text",
            "example": "Reis Kundekort gir deg 20% rabatt på alle kjøp"
          },
          "displayName": {
            "type": "string",
            "description": "Display name for loyalty program",
            "example": "Reis Kundekort"
          },
          "languageCode": {
            "type": "string",
            "description": "What language the description is written in, ISO639-3",
            "example": "NOB"
          },
          "lastChangedAt": {
            "type": "string",
            "description": "When the loyalty program was last changed",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "lastChangedBy": {
            "type": "string",
            "description": "Which client changed the loyalty program last",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "description": "Description of a loyalty program version"
      },
      "LoyaltyProgramFindAllResponse": {
        "required": [
          "id",
          "internalDescription",
          "loyaltyProgramType",
          "organisationId",
          "productId",
          "versions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The loyalty program's ID",
            "format": "int64",
            "example": 1
          },
          "internalDescription": {
            "type": "string",
            "description": "A human readable internal description of the loyalty program",
            "example": "Free coffee program"
          },
          "loyaltyProgramType": {
            "type": "string",
            "description": "The type of loyalty program. Types include COUPONS, TIMED and POINTS. A time-based loyalty program specifies a duration a connected contract is valid. A point-based loyalty program has contracts keeping track of earning and burning of points. This also includes gift cards. A coupon-based loyalty programs specifies how many times a contract can be consumed. For compatibility reasons, UNMAPPED is also available for loyalty programs that has not yet been classified.",
            "example": "TIMED",
            "enum": ["TIMED", "POINTS", "COUPONS", "UNMAPPED"]
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation owning the loyalty program",
            "format": "int64",
            "example": 1
          },
          "productId": {
            "type": "string",
            "description": "The id of the product entitlement contained in this loyalty program"
          },
          "versions": {
            "type": "array",
            "description": "The versions of this loyalty program",
            "items": {
              "$ref": "#/components/schemas/LoyaltyProgramVersionResponse"
            }
          }
        },
        "description": "A loyalty program"
      },
      "LoyaltyProgramFlatResponse": {
        "required": [
          "descriptions",
          "endDate",
          "id",
          "internalDescription",
          "loyaltyProgramType",
          "organisationId",
          "productId",
          "productVersion",
          "startDate",
          "status",
          "versionNumber"
        ],
        "type": "object",
        "properties": {
          "couponConfig": {
            "$ref": "#/components/schemas/CouponConfigResponse"
          },
          "defaultCouponsLimit": {
            "type": "integer",
            "description": "Deprecated. See couponConfig instead. How many coupons (eg. the maximum amount of usages) the underlying contracts of the loyalty program has.",
            "format": "int64",
            "example": 10
          },
          "descriptions": {
            "type": "array",
            "description": "A list of human readable descriptions in different languages. Only one language per description is allowed.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyProgramDescriptionResponse"
            }
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the loyaltyprogram. All contracts will expire when the loyaltyprogram expires. Supports ISO 8601 date format.",
            "format": "date-time"
          },
          "id": {
            "type": "integer",
            "description": "The id of the loyalty program",
            "format": "int64"
          },
          "internalDescription": {
            "type": "string",
            "description": "A human readable internal description of the loyalty program.",
            "example": "Customer card with 15 % discount"
          },
          "loyaltyProgramCode": {
            "type": "string",
            "description": "A word or code the customer can use to activate a loyalty program for themselves, set by the creator of the loyalty program"
          },
          "loyaltyProgramType": {
            "type": "string",
            "description": "The type of loyalty program. Types include COUPONS, TIMED and POINTS. A time-based loyalty program specifies a duration a connected contract is valid. A point-based loyalty program has contracts keeping track of earning and burning of points. This also includes gift cards. A coupon-based loyalty programs specifies how many times a contract can be consumed. For compatibility reasons, UNMAPPED is also available for loyalty programs that has not yet been classified.",
            "example": "TIMED",
            "enum": ["TIMED", "POINTS", "COUPONS", "UNMAPPED"]
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation that owns this loyalty program.",
            "format": "int64",
            "example": 20
          },
          "productId": {
            "type": "string",
            "description": "The id of the product associated with this loyalty program."
          },
          "productVersion": {
            "type": "string",
            "description": "The version of the product associated with this loyalty program."
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the loyaltyprogram. If specified ahead in time, the loyaltyprogram will get status = draft. Supports ISO 8601 date format.",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "The current status of this loyalty program. Can be DRAFT, CURRENT, DEPRECATED",
            "enum": ["DRAFT", "CURRENT", "DEPRECATED"]
          },
          "usageValidityPeriod": {
            "type": "string",
            "description": "The duration of a contract associated with this loyaltyprogram. This is set for loyalty program types TIMED and POINTS. The default value is null, which means the contract has an unlimited duration. This field uses the ISO 8601 duration format and accept the units: Days and Time. For example; 'P3DT12H30M5S' represents a duration of three days, twelve hours, thirty minutes, and five seconds.",
            "example": "P3DT12H30M5S"
          },
          "versionNumber": {
            "type": "integer",
            "description": "The version of this loyalty program.",
            "format": "int64"
          }
        },
        "description": "The current values for a loyalty program"
      },
      "LoyaltyProgramPostRequest": {
        "required": [
          "endDate",
          "internalDescription",
          "productId",
          "productVersion"
        ],
        "type": "object",
        "properties": {
          "couponConfig": {
            "$ref": "#/components/schemas/CouponConfigRequest"
          },
          "defaultCouponsLimit": {
            "type": "integer",
            "description": "Deprecated. Use couponConfig instead. How many coupons (eg. the maximum amount of usages) the underlying contracts of the loyalty program has.",
            "format": "int64",
            "example": 10,
            "deprecated": true
          },
          "descriptions": {
            "maxItems": 2147483647,
            "minItems": 1,
            "type": "array",
            "description": "A list of human readable descriptions in different languages. Only one language per description is allowed.If no descriptions are provided, the descriptions of the previous version will be reused.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyProgramDescriptionRequest"
            }
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the loyalty program. All contracts will expire when the loyalty program expires. Supports ISO 8601 date format. In case of overlapping versions, the newest version added is used.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "internalDescription": {
            "type": "string",
            "description": "A human readable internal description of the loyalty program",
            "example": "Free coffee program"
          },
          "loyaltyProgramCode": {
            "type": "string",
            "description": "A word or code that customers may use to activate a loyalty program for themselves."
          },
          "loyaltyProgramType": {
            "type": "string",
            "description": "The type of loyalty program. A time-based loyalty program specifies a duration a connected contract is valid. A point-based loyalty program has contracts keeping track of earning and burning of points. This also includes gift cards. A coupon-based loyalty programs specifies how many times a contract can be consumed. Default = UNMAPPED for compatibility reasons.",
            "example": "TIMED",
            "enum": ["TIMED", "POINTS", "COUPONS"]
          },
          "productId": {
            "pattern": "[A-Z]{3}:[a-zA-Z]+:[a-zA-Z\\d]+",
            "type": "string",
            "description": "The id of the product entitlement contained in this loyalty program",
            "example": "NSB:SalesDiscountRight:CustomerCard"
          },
          "productVersion": {
            "pattern": "[A-Z]{3}:Version:[a-zA-Z\\d-]+",
            "type": "string",
            "description": "The version of the product associated with the loyalty program.",
            "example": "ENT:Version:V1"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the loyalty program. If specified ahead in time, the loyalty program will get status = draft. Supports ISO 8601 format. Defaults to now. In case of overlapping versions, the newest version added is used and the previous version will be deprecated.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "usageValidityPeriod": {
            "type": "string",
            "description": "The duration of a contract associated with this loyalty program. The default value is null, which means the contract has an unlimited duration. This field uses the ISO 8601 duration format and accept the units: Days and Time. For example; 'P3DT12H30M5S' represents a duration of three days, twelve hours, thirty minutes, and five seconds.",
            "format": "duration",
            "example": "P3DT12H30M5S"
          }
        },
        "description": "A loyalty program request to create a new loyalty program"
      },
      "LoyaltyProgramVersionRequest": {
        "required": ["endDate", "productVersion"],
        "type": "object",
        "properties": {
          "couponConfig": {
            "$ref": "#/components/schemas/CouponConfigRequest"
          },
          "defaultCouponsLimit": {
            "type": "integer",
            "description": "Deprecated. Use couponConfig instead. How many coupons (eg. the maximum amount of usages) the underlying contracts of the loyalty program has.",
            "format": "int64",
            "example": 10,
            "deprecated": true
          },
          "descriptions": {
            "type": "array",
            "description": "A list of human readable descriptions in different languages. Only one language per description is allowed.If no descriptions are provided, the descriptions of the previous version will be reused.",
            "items": {
              "$ref": "#/components/schemas/LoyaltyProgramDescriptionRequest"
            }
          },
          "endDate": {
            "type": "string",
            "description": "The end date of the loyalty program. All contracts will expire when the loyalty program expires. Supports ISO 8601 date format. In case of overlapping versions, the newest version added is used.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "loyaltyProgramCode": { "type": "string" },
          "productVersion": {
            "pattern": "[A-Z]{3}:Version:[a-zA-Z\\d-]+",
            "type": "string",
            "description": "The version of the product associated with the loyalty program.",
            "example": "ENT:Version:V1"
          },
          "startDate": {
            "type": "string",
            "description": "The start date of the loyalty program. If specified ahead in time, the loyalty program will get status = draft. Supports ISO 8601 format. Defaults to now. In case of overlapping versions, the newest version added is used and the previous version will be deprecated.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "usageValidityPeriod": {
            "type": "string",
            "description": "The duration of a contract associated with this loyalty program. The default value is null, which means the contract has an unlimited duration. This field uses the ISO 8601 duration format and accept the units: Days and Time. For example; 'P3DT12H30M5S' represents a duration of three days, twelve hours, thirty minutes, and five seconds.",
            "format": "duration",
            "example": "P3DT12H30M5S"
          }
        },
        "description": "Create a new versions on an existing loyalty program"
      },
      "LoyaltyProgramVersionResponse": {
        "required": [
          "createdAt",
          "createdBy",
          "lastChangedAt",
          "lastChangedBy",
          "productVersion",
          "startDate",
          "status",
          "versionNumber"
        ],
        "type": "object",
        "properties": {
          "couponConfig": {
            "$ref": "#/components/schemas/CouponConfigResponse"
          },
          "createdAt": {
            "type": "string",
            "description": "When the loyalty program was created",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "createdBy": {
            "type": "string",
            "description": "Which client created the loyalty program",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "defaultCouponsLimit": {
            "type": "integer",
            "description": "Deprecated. See couponConfig instead. How many coupons (eg. the maximum amount of usages) the underlying contracts of the loyalty program has.",
            "format": "int64",
            "example": 10
          },
          "descriptions": {
            "type": "array",
            "description": "Loyalty program descriptions in different languages",
            "items": {
              "$ref": "#/components/schemas/LoyaltyProgramDescriptionResponse"
            }
          },
          "endDate": {
            "type": "string",
            "description": "When the loyalty program stops being available. ISO 8601",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "lastChangedAt": {
            "type": "string",
            "description": "When the loyalty program was last changed",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "lastChangedBy": {
            "type": "string",
            "description": "Which client changed the loyalty program last",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "loyaltyProgramCode": {
            "type": "string",
            "description": "A word or code that customers may use to activate a loyalty program for themselves."
          },
          "productVersion": {
            "type": "string",
            "description": "The version of the product associated with the loyalty program.",
            "example": "ENT:Version:V1"
          },
          "startDate": {
            "type": "string",
            "description": "When the loyalty program starts being available. ISO 8601",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "status": {
            "type": "string",
            "description": "The status of this version",
            "example": "CURRENT",
            "enum": ["DRAFT", "CURRENT", "DEPRECATED"]
          },
          "usageValidityPeriod": {
            "type": "string",
            "description": "The duration of a contract associated with this loyalty program. This is only set for loyalty program type TIMED and POINTS. The default value is null, which means the contract has an unlimited duration. This field uses the ISO 8601 duration format and accept the units: Days and Time. For example; 'P3DT12H30M5S' represents a duration of three days, twelve hours, thirty minutes, and five seconds.",
            "example": "P3DT12H30M5S"
          },
          "versionNumber": {
            "type": "integer",
            "description": "The version of the loyalty program",
            "format": "int64",
            "example": 1
          }
        },
        "description": "A loyalty program version"
      },
      "NewPointContract": {
        "required": [
          "amount",
          "contractUUID",
          "date",
          "internalTransactionId",
          "organisationId"
        ],
        "type": "object",
        "properties": {
          "amount": { "pattern": "-?\\d*\\.\\d\\d", "type": "string" },
          "contractUUID": { "type": "string", "format": "uuid" },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2023-01-01"
          },
          "email": { "type": "string" },
          "internalTransactionId": { "type": "integer", "format": "int64" },
          "issuer": { "type": "string" },
          "organisationId": { "type": "integer", "format": "int64" },
          "posId": { "type": "integer", "format": "int64" }
        }
      },
      "OrderLineEventRequest": {
        "required": [
          "eventType",
          "orderId",
          "orderLineText",
          "organisationId",
          "originalPrice",
          "price",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "codespace": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "Code representing the company offering the purchased product",
            "example": "ABC"
          },
          "couponsUsed": {
            "type": "integer",
            "description": "How many coupons (usages) this event is using. This defaults to 1, but will be ignored if the contract in question does not use coupons.",
            "format": "int64",
            "example": 1
          },
          "effectiveCancellationDate": {
            "type": "string",
            "description": "If set, the effective date for cancellation.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "eventType": {
            "pattern": "PURCHASE|CANCELLATION",
            "type": "string",
            "description": "The order line event type. Can be one of 'PURCHASE' or 'CANCELLATION'."
          },
          "lastTravelDate": {
            "type": "string",
            "description": "The last date of travel, related to entitlement usage. Defaults to equal travelDate. Relevant for period tickets only.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "orderId": {
            "maxLength": 90,
            "minLength": 0,
            "type": "string",
            "description": "The order ID. This is used for lookup when trying to find the order in Enturs systems. External partners are expected to use an order id that makes sense in their sales system context.",
            "example": "ABC"
          },
          "orderLineId": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The order line Id for Entur orders. The default value is 'external'.",
            "example": "ABC"
          },
          "orderLineText": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "description": "The name of the product that this usage refers to. This should be supplied by the caller to indicate which item has been bought. This is displayed to the user in reports.",
            "example": "1 x Voksen, Oslo S - OSL"
          },
          "orderLineVersion": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The order version. The default value is 'external'.",
            "example": "ABC",
            "default": "external"
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation through which the order was placed. This is overridden by the organisation of the user, unless they have elevated privileges.",
            "format": "int64",
            "example": 1
          },
          "originalPrice": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "-?\\d+.\\d\\d",
            "type": "string",
            "description": "The original price for this item, i.e.  i.e the original price without the travellers discount.",
            "example": "140.0"
          },
          "price": {
            "maxLength": 10,
            "minLength": 0,
            "pattern": "-?\\d+.\\d\\d",
            "type": "string",
            "description": "The actual paid price for this item, i.e. what did the user actually pay after rebate. If attempting to cancel a previous registration, this must negative, and the orderId must match the original order.",
            "example": "50.0"
          },
          "timestamp": { "type": "string", "format": "date-time" },
          "travelDate": {
            "type": "string",
            "description": "The first date of travel on this ticket. Will be used to decide when to report this usage to the Norwegian tax administration, if applicable. Defaults to the current date and time.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "\n      This request is used to record the use of a contract by registering an OrderLineEvent on the contract.\n      The event is added to the list of registered order line events. This may contribute to income being reported to the Norwegian\n      Tax administration. If you want to cancel a previously registered order line event, you must supply\n      the same order id and a negative pricePaid.\n    "
      },
      "OrderLineEventResponse": {
        "required": [
          "eventType",
          "isCancelled",
          "isPurchased",
          "orderId",
          "orderLineId",
          "orderLineVersion",
          "organisationId",
          "price",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "codespace": {
            "type": "string",
            "description": "Codespace",
            "example": "ABC"
          },
          "couponsUsed": {
            "type": "integer",
            "description": "How many coupons (usages) this event is using. This defaults to 1, but will be ignored if the contract in question does not use coupons.",
            "format": "int64",
            "example": 1
          },
          "effectiveCancellationDate": {
            "type": "string",
            "description": "If set, the effective date for cancellation.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "eventType": {
            "type": "string",
            "description": "The order line event type. Can be one of 'PURCHASE' or 'CANCELLATION'. PURCHASE is used when the order line event describe purchase of a travel using a contract (not the same as isPurchased). CANCELLATION is when the order line event is a cancellation (can be the same as isCancelled)"
          },
          "isCancelled": {
            "type": "boolean",
            "description": "Whether the order line event is a cancellation"
          },
          "isPurchased": {
            "type": "boolean",
            "description": "Whether the order line event describes the purchase of a contract, or contract consumer"
          },
          "lastTravelDate": {
            "type": "string",
            "description": "The last date of travel, related to entitlement usage. Defaults to equal travelDate. Relevant for period tickets only.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "manualTransactionComment": {
            "type": "string",
            "description": "If the order line is added manually, this field will have an explanation",
            "example": "Refund because the order was cancelled too late"
          },
          "orderId": {
            "type": "string",
            "description": "The order ID",
            "example": "ABC"
          },
          "orderLineId": {
            "type": "string",
            "description": "The order line ID",
            "example": "KFN"
          },
          "orderLineText": {
            "type": "string",
            "description": "The name of the product that this usage refers to. This should be supplied by the caller to indicate which item has been bought. This is displayed to the user in reports.",
            "example": "1 x Voksen, Oslo S - OSL"
          },
          "orderLineVersion": {
            "type": "string",
            "description": "The order line version",
            "example": "132"
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation through which the order was placed",
            "format": "int64",
            "example": 1
          },
          "originalPrice": {
            "type": "string",
            "description": "The original price for this item, i.e.  i.e the original price without the travellers discount.",
            "example": "3.77"
          },
          "price": {
            "type": "string",
            "description": "The actual paid price for this item, i.e. what did the user actually pay after rebate. Negative if this was a cancellation",
            "example": "3.77"
          },
          "taxDistributions": {
            "type": "array",
            "description": "Tax savings for this order line",
            "items": { "$ref": "#/components/schemas/TaxDistributionResponse" }
          },
          "timestamp": {
            "type": "string",
            "description": "When the order line event was saved",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "travelDate": {
            "type": "string",
            "description": "The first date of travel on this ticket. Will be used to decide when to report this usage to the Norwegian tax administration, if applicable. Defaults to the current date and time.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "An order line event on a contract"
      },
      "PageOfContractResponse": {
        "required": ["items", "totalItems", "totalPages"],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "All items for this page",
            "items": { "$ref": "#/components/schemas/ContractResponse" }
          },
          "totalItems": {
            "type": "integer",
            "description": "Total items which could be returned",
            "format": "int64",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Paged content"
      },
      "PageOfLoyaltyProgramFindAllResponse": {
        "required": ["items", "totalItems", "totalPages"],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "All items for this page",
            "items": {
              "$ref": "#/components/schemas/LoyaltyProgramFindAllResponse"
            }
          },
          "totalItems": {
            "type": "integer",
            "description": "Total items which could be returned",
            "format": "int64",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Paged content"
      },
      "PageOfLoyaltyProgramFlatResponse": {
        "required": ["items", "totalItems", "totalPages"],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "All items for this page",
            "items": {
              "$ref": "#/components/schemas/LoyaltyProgramFlatResponse"
            }
          },
          "totalItems": {
            "type": "integer",
            "description": "Total items which could be returned",
            "format": "int64",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Paged content"
      },
      "PageOfSimpleContractResponse": {
        "required": ["items", "totalItems", "totalPages"],
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "description": "All items for this page",
            "items": { "$ref": "#/components/schemas/SimpleContractResponse" }
          },
          "totalItems": {
            "type": "integer",
            "description": "Total items which could be returned",
            "format": "int64",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Paged content"
      },
      "PolicyRequest": {
        "required": ["key", "value"],
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key for which field that should be matching",
            "example": "surname"
          },
          "value": {
            "type": "string",
            "description": "Value that should match",
            "example": "Nordmann"
          }
        },
        "description": "Policy restricting who can claim the contract. Every key in the policy must match the customer exactly. Values are hashed on storage."
      },
      "PolicyResponse": {
        "required": ["id", "key"],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id of the policy",
            "format": "int64",
            "example": 1
          },
          "key": {
            "type": "string",
            "description": "Key for which field that should be matching",
            "example": "surname"
          }
        },
        "description": "Policy, returns keys that have to match"
      },
      "SimpleContractResponse": {
        "required": [
          "consumableFrom",
          "createdAt",
          "createdBy",
          "lastChangedAt",
          "lastChangedBy",
          "organisationId",
          "status",
          "uuid"
        ],
        "type": "object",
        "properties": {
          "acceptanceDate": {
            "type": "string",
            "description": "When the contract was accepted by the customer",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "consumableFrom": {
            "type": "string",
            "description": "From when the contract can be consumed",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "contractConsumers": {
            "type": "array",
            "description": "The list of customers allowed to use the contract",
            "items": { "$ref": "#/components/schemas/ContractConsumerResponse" }
          },
          "couponsLimit": {
            "type": "integer",
            "description": "How many coupons the contract has. Default is cascaded from Loyalty Program Version. If set, the contract will be blocked for usage when all coupons are used.  Coupons are registered via an OrderLineEvent.",
            "format": "int64",
            "example": 10
          },
          "createdAt": {
            "type": "string",
            "description": "When the contract was created",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "createdBy": {
            "type": "string",
            "description": "Which client created the contract",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "expirationDate": {
            "type": "string",
            "description": "When the contract expires",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "externalRef": {
            "type": "string",
            "description": "Optional external reference. Examples are membership number and employee number",
            "example": "123415A"
          },
          "lastChangedAt": {
            "type": "string",
            "description": "When the contract was last changed",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          },
          "lastChangedBy": {
            "type": "string",
            "description": "Which client changed the contract last",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "orderLineEvents": {
            "type": "array",
            "description": "A list of order line events related to this contract",
            "items": { "$ref": "#/components/schemas/OrderLineEventResponse" }
          },
          "organisationId": {
            "type": "integer",
            "description": "Which organisation the contract concerns",
            "format": "int64",
            "example": 1
          },
          "policies": {
            "type": "array",
            "description": "The list of keys validated against the customer claiming the contract",
            "items": { "$ref": "#/components/schemas/PolicyResponse" }
          },
          "status": {
            "type": "string",
            "description": "The contract status. A normal contract has status valid. It can be expired, refunded, cancelled, misused and valid ",
            "example": "Refunded"
          },
          "uuid": {
            "type": "string",
            "description": "Unique contract identifier",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          }
        },
        "description": "A contract between a customer and an organisation"
      },
      "TaxDistributionResponse": {
        "required": ["isUnknown", "taxMonth", "taxSaving", "taxYear"],
        "type": "object",
        "properties": {
          "isUnknown": {
            "type": "boolean",
            "description": "If set, the tax distribution saving for that month is unknown. This is the case for all period tickets before may 2021. They need to be calculated manually "
          },
          "taxMonth": {
            "type": "integer",
            "description": "The month of the tax saving",
            "format": "int32"
          },
          "taxSaving": {
            "type": "string",
            "description": "The value of tax saved"
          },
          "taxYear": {
            "type": "integer",
            "description": "The year of the tax saving",
            "format": "int32"
          }
        },
        "description": "Tax distribution for an order line"
      },
      "TotalAmount": {
        "required": ["amount", "calculatedAt", "currency"],
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0.01,
            "exclusiveMinimum": false,
            "pattern": "-?\\d*\\.\\d\\d",
            "type": "string",
            "description": "Amount amount. Format: -?\\d*\\.\\d\\d  Examples: 123.34  1.00  34000.00"
          },
          "calculatedAt": {
            "type": "string",
            "description": "When the amount was calculated",
            "format": "date-time",
            "readOnly": true
          },
          "currency": {
            "type": "string",
            "description": "Currency of the amount",
            "example": "NOK"
          }
        },
        "description": "The current total for this contract (earn/burn or giftcard)"
      },
      "TotalAmountRequest": {
        "required": ["amount", "currency"],
        "type": "object",
        "properties": {
          "amount": {
            "minimum": 0.01,
            "exclusiveMinimum": false,
            "pattern": "-?\\d*\\.\\d\\d",
            "type": "string",
            "description": "Amount amount. Format: -?\\d*\\.\\d\\d  Examples: 123.34  1.00  34000.00",
            "example": "1200.02"
          },
          "currency": {
            "type": "string",
            "description": "Currency of the amount",
            "example": "NOK"
          }
        },
        "description": "Value of the transaction. Negative values subtract from the amount available on the card, positive inserts more money and raises the amount. This may include fractions: 120.12"
      },
      "TransactionResponse": {
        "required": ["amount", "currency", "timestamp"],
        "type": "object",
        "properties": {
          "amount": {
            "pattern": "-?\\d*\\.\\d\\d",
            "type": "string",
            "description": "How much was the amount changed by this transaction? Positive value means deposit onto the card, negative withdrawal.",
            "example": "-130.0"
          },
          "currency": {
            "type": "string",
            "description": "Currency used in this transaction. Only one currency is allowed for all transactions on a single contract.",
            "example": "NOK"
          },
          "email": {
            "type": "string",
            "description": "Identifying sellers email for this transaction.",
            "example": "test@test.no"
          },
          "externalTransactionId": {
            "type": "string",
            "description": "External transaction id for the ongoing transaction.",
            "example": "9087a885782a819f95816d88da8d78"
          },
          "internalTransactionId": {
            "type": "string",
            "description": "Internal unique identifier for this transaction.",
            "example": "1927bd54-4cc4-4ea1-8431-599231f39797"
          },
          "posId": {
            "type": "integer",
            "description": "Identifying point of sale for this transaction.",
            "format": "int64",
            "example": 317001944
          },
          "rrn": {
            "type": "string",
            "description": "External RRN for the payment.",
            "example": "22ceb5c3acaf78a54f3af5de2050f0"
          },
          "timestamp": {
            "type": "string",
            "description": "Timestamp for this transaction.",
            "format": "date-time",
            "example": "2007-12-03T10:15:30+01:00"
          }
        },
        "description": "The list of transactions for this contract (earn/burn or giftcard)"
      },
      "TransferTransactionResponse": {
        "required": ["fromContract", "toContract"],
        "type": "object",
        "properties": {
          "fromContract": {
            "$ref": "#/components/schemas/ContractTransactionResponse"
          },
          "toContract": {
            "$ref": "#/components/schemas/ContractTransactionResponse"
          }
        },
        "description": "Transaction information regarding the contract transaction transfer."
      },
      "UsedPointContract": {
        "required": ["amount", "contractUUID", "date", "internalTransactionId"],
        "type": "object",
        "properties": {
          "amount": { "pattern": "-?\\d*\\.\\d\\d", "type": "string" },
          "contractUUID": { "type": "string", "format": "uuid" },
          "date": {
            "type": "string",
            "format": "date",
            "example": "2023-01-01"
          },
          "internalTransactionId": { "type": "integer", "format": "int64" },
          "orderId": { "type": "string" },
          "rrnr": { "type": "string" }
        }
      },
      "ValidateContractConsumptionRequest": {
        "required": ["consumptions"],
        "type": "object",
        "properties": {
          "consumptions": {
            "type": "array",
            "description": "A list of consumptions to verify",
            "items": { "$ref": "#/components/schemas/ContractConsumption" }
          }
        },
        "description": "A request to validate the consumption of one or more product entitlements in an order"
      },
      "ValidateContractConsumptionResponse": {
        "required": ["code", "isValid", "reason"],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "A code pertaining to the reason for rejection, if any. Code 3101 = OK.",
            "example": "3101"
          },
          "isValid": {
            "type": "boolean",
            "description": "True if all consumptions were valid, otherwise false"
          },
          "reason": {
            "type": "string",
            "description": "A short message detailing the reasoning behind the status.",
            "example": "ok"
          }
        },
        "description": "The result of a contract consumption validations"
      },
      "ConsentBaseRequest": {
        "required": ["consentCode", "terms"],
        "type": "object",
        "properties": {
          "consentCode": {
            "type": "string",
            "description": "Consent code, identifying the consent base with current version"
          },
          "consentOwnerOrgId": {
            "type": "integer",
            "description": "If set, the organisation which owns the consent, and can use it exclusively",
            "format": "int64"
          },
          "internalDescription": {
            "type": "array",
            "description": "Internal description, describing the use cases for the consent",
            "items": {
              "$ref": "#/components/schemas/InternalDescriptionRequest"
            }
          },
          "orgNameSubstitutionPattern": {
            "type": "string",
            "description": "The pattern on which to perform substitution within consentDescription and consentTerms. Facilitates reusable consents across organisations."
          },
          "terms": {
            "type": "array",
            "description": "Consent description and terms in multiple languages. Supports markdown",
            "items": { "$ref": "#/components/schemas/ConsentTermsRequest" }
          },
          "validFrom": {
            "type": "string",
            "description": "If set, the date the consent base is valid from. It is not possible to change the consent terms after this date without creating a new version. If not set, the consent is in draft mode.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "If set, the date the consent base is valid to. Set the date to deactivate the consent. If not set the consent is active from validFrom and forever after.",
            "format": "date-time"
          }
        },
        "description": "Representing the body of a POST request for consent base"
      },
      "ConsentBaseResponse": {
        "required": [
          "changedAt",
          "consentCode",
          "createdAt",
          "terms",
          "version"
        ],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the consent was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "consentCode": {
            "type": "string",
            "description": "Consent code, identifying the consent base with version"
          },
          "consentOwnerOrgId": {
            "type": "integer",
            "description": "If set, the organisation which owns the consent, and can use it exclusively",
            "format": "int64"
          },
          "createdAt": {
            "type": "string",
            "description": "When the consent was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "internalDescription": {
            "type": "array",
            "description": "Internal description, describing the use cases for the consent",
            "items": {
              "$ref": "#/components/schemas/InternalDescriptionResponse"
            }
          },
          "orgNameSubstitutionPattern": {
            "type": "string",
            "description": "The pattern on which to perform substitution within consentDescription and consentTerms. Facilitates reusable consents across organisations"
          },
          "terms": {
            "type": "array",
            "description": "Consent description and consent in multiple languages. The terms can contain MarkDown",
            "items": { "$ref": "#/components/schemas/ConsentTermsResponse" }
          },
          "validFrom": {
            "type": "string",
            "description": "If set, the date the consent is valid from. It is not possible to change the consent terms after this date without creating a new version. If not set, the consent is in draft mode.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "If set, the date the consent is valid to. Set the date to deactivate the consent. If not set, the consent is active from validFrom and forever after",
            "format": "date-time"
          },
          "version": {
            "type": "integer",
            "description": "The consent version, identifying consent base with consent code",
            "format": "int32"
          }
        },
        "description": "Representing the body for a PUT or POST response for consent base"
      },
      "ConsentBaseVersionPatchRequest": {
        "type": "object",
        "properties": {
          "internalDescription": {
            "type": "array",
            "description": "The internal description. Is only exposed for admin endpoints",
            "items": {
              "$ref": "#/components/schemas/InternalDescriptionRequest"
            }
          },
          "terms": {
            "type": "array",
            "description": "Terms to add, it is not possible to update an existing language",
            "items": { "$ref": "#/components/schemas/ConsentTermsRequest" }
          },
          "validTo": {
            "type": "string",
            "description": "If set, the date the consent is valid to. Set the date to deactivate the consent. If not set the consent is active from validFrom and forever after",
            "format": "date-time"
          }
        },
        "description": "Patch request for consentBase to update updatable fields after the consent base is active"
      },
      "ConsentBaseVersionRequest": {
        "required": ["terms"],
        "type": "object",
        "properties": {
          "internalDescription": {
            "type": "array",
            "description": "Internal description, describing what the usecases are for the consent",
            "items": {
              "$ref": "#/components/schemas/InternalDescriptionRequest"
            }
          },
          "orgNameSubstitutionPattern": {
            "type": "string",
            "description": "The pattern on which to perform substitution within consentDescription and consentTerms. Facilitates reusable consents across organisations."
          },
          "terms": {
            "type": "array",
            "description": "Consent description and terms in multiple languages. Supports MarkDown",
            "items": { "$ref": "#/components/schemas/ConsentTermsRequest" }
          },
          "validFrom": {
            "type": "string",
            "description": "The date the consent base is valid from. It is not possible to change the consent terms after this date without creating a new version. If not set the consent is in draft mode.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "If set, the date the consent base id valid to. Set the date to deactivate the consent. If not set the consent is active from validFrom and forever after",
            "format": "date-time"
          }
        },
        "description": "Representing the body for a PUT or POST request for consent base version"
      },
      "ConsentCrmResponse": {
        "required": [
          "consentBaseVersion",
          "consentCode",
          "consentId",
          "consentOrganisationId",
          "createdByOrgId",
          "customerNumber",
          "customerRef",
          "givenConsentId"
        ],
        "type": "object",
        "properties": {
          "consentBaseVersion": {
            "type": "integer",
            "description": "The consent base version associated with the consent",
            "format": "int32"
          },
          "consentCode": {
            "type": "string",
            "description": "The consent code of the base consent associated with the consent"
          },
          "consentId": {
            "type": "integer",
            "description": "The id of the Consent that has been consented",
            "format": "int64"
          },
          "consentOrganisationId": {
            "type": "integer",
            "description": "The organisation that owns the Consent. Typically an 'Operatør'",
            "format": "int64"
          },
          "countryCode": {
            "type": "string",
            "description": "The telephone number country code"
          },
          "createdByOrgId": {
            "type": "integer",
            "description": "The organisation that created the Given Consent. Also known as 'Agent'",
            "format": "int64"
          },
          "customerNumber": {
            "type": "integer",
            "description": "Customer number, a unique identifier for the customer.",
            "format": "int64"
          },
          "customerRef": {
            "type": "string",
            "description": "Customer ref, a unique identifier for the customer within an organisation"
          },
          "email": { "type": "string", "description": "The customer's email" },
          "fromStopPlace": {
            "type": "string",
            "description": "The stop place where the customer started its journey. Netex format",
            "example": "NSR:StopPlace:12345"
          },
          "givenConsentId": {
            "type": "integer",
            "description": "Given consent id.",
            "format": "int64"
          },
          "lineRef": {
            "type": "string",
            "description": "Reference to the customers journey line. Netex format",
            "example": "VYT:Line:L1"
          },
          "originalDatedServiceJourneyId": {
            "type": "string",
            "description": "Unique Id for a specific Service Journey. Netex format with ENT as operator",
            "example": "ENT:DatedServiceJourney:12345"
          },
          "telephoneNumber": {
            "type": "string",
            "description": "The customer's telephone number"
          },
          "toStopPlace": {
            "type": "string",
            "description": "The stop place where the customers ended its journey. Netex format",
            "example": "NSR:StopPlace:12345"
          }
        },
        "description": "A condensed view of consent information"
      },
      "ConsentPatchRequest": {
        "type": "object",
        "properties": {
          "validTo": {
            "type": "string",
            "description": "If set, the date the consent is valid to. Set the date to deactivate the consent. If not set the consent is active from validFrom and forever after",
            "format": "date-time"
          }
        }
      },
      "ConsentRequest": {
        "required": [
          "consentCode",
          "isEmailSupported",
          "isSmsSupported",
          "organisationId"
        ],
        "type": "object",
        "properties": {
          "consentBaseVersion": {
            "type": "integer",
            "description": "Consent base version. To create a consent for a specific version",
            "format": "int32"
          },
          "consentCode": {
            "type": "string",
            "description": "Consent code. Use the consent code + consent base version to identify the consent base"
          },
          "isEmailSupported": {
            "type": "boolean",
            "description": "If the current organisation supports email as a way of contact."
          },
          "isSmsSupported": {
            "type": "boolean",
            "description": "If the current organisation supports sms as a way of contact."
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation the consent is valid for. Typically an 'Operatør'",
            "format": "int64"
          },
          "validFrom": {
            "type": "string",
            "description": "If set, the date the consent is valid from. Can only be set to a date after consent base validFrom. If not set, the consent base is in draft mode.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "If set, the date the consent is valid to. Set the date to deactivate the consent. Can only be set to a date before the consent base validTo. If not set the consent is active from validFrom and forever after.",
            "format": "date-time"
          }
        },
        "description": "Which organisation that provides the content consented to"
      },
      "ConsentResponse": {
        "required": [
          "changedAt",
          "consentBase",
          "consentCode",
          "createdAt",
          "id",
          "isEmailSupported",
          "isSmsSupported",
          "organisationId"
        ],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the consent was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "consentBase": { "$ref": "#/components/schemas/ConsentBaseResponse" },
          "consentCode": { "type": "string", "description": "Consent code" },
          "createdAt": {
            "type": "string",
            "description": "When the consent was created. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "id": {
            "type": "integer",
            "description": "Organisation consent ID.",
            "format": "int64"
          },
          "isEmailSupported": {
            "type": "boolean",
            "description": "If the current organisation supports email as a way of contact."
          },
          "isSmsSupported": {
            "type": "boolean",
            "description": "If the current organisation supports sms as a way of contact."
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation the consent is valid for. Typically an 'Operatør'",
            "format": "int64"
          },
          "validFrom": {
            "type": "string",
            "description": "If set, the date the consent is valid from. Can only be set to a date after consent base validFrom. If not set, the consent base is in draft mode.",
            "format": "date-time"
          },
          "validTo": {
            "type": "string",
            "description": "If set, the date the consent is valid to. Set the date to deactivate the consent. Can only be set to a date before the consent base validTo. If not set the consent is active from validFrom and forever after.",
            "format": "date-time"
          }
        },
        "description": "Which organisation that provides the content consented to"
      },
      "ConsentTermsRequest": {
        "required": ["fullDescription", "languageCode", "shortDescription"],
        "type": "object",
        "properties": {
          "fullDescription": {
            "type": "string",
            "description": "Text describing the terms in detail. The text can contain MarkDown"
          },
          "languageCode": {
            "type": "string",
            "description": "ISO-639-3 languageCode.",
            "example": "ENG"
          },
          "shortDescription": {
            "type": "string",
            "description": "Short text explaining the terms. The text can contain MarkDown"
          }
        },
        "description": "Contains text for terms in a specific language. Clients may only use shortDescription to obtain consents and opt-in full description if necessary"
      },
      "ConsentTermsResponse": {
        "required": ["fullDescription", "languageCode", "shortDescription"],
        "type": "object",
        "properties": {
          "fullDescription": {
            "type": "string",
            "description": "Text describing the terms in detail. The text can contain MarkDown"
          },
          "languageCode": {
            "type": "string",
            "description": "ISO-639-3 language code. 3 characters",
            "example": "ENG"
          },
          "shortDescription": {
            "type": "string",
            "description": "Short text explaining the terms. The text can contain MarkDown"
          }
        },
        "description": "Contains text for terms in a specific language. Clients may only use short description to obtain consents and opt-in full description if necessary"
      },
      "GivenConsentBulkRequest": {
        "type": "object",
        "properties": {
          "customerNumbers": {
            "type": "array",
            "description": "Customer numbers to look up.",
            "items": {
              "type": "integer",
              "description": "Customer numbers to look up.",
              "format": "int64"
            }
          },
          "customerRefs": {
            "type": "array",
            "description": "Customer refs to look up.",
            "items": {
              "type": "string",
              "description": "Customer refs to look up."
            }
          }
        },
        "description": "A request for multiple consents"
      },
      "GivenConsentPutRequest": {
        "required": ["consentChoice", "expirationDate"],
        "type": "object",
        "properties": {
          "consentChoice": {
            "type": "boolean",
            "description": "Whether this consent has been approved or rejected."
          },
          "countryCode": {
            "type": "string",
            "description": "The telephone number country code provided with the consent"
          },
          "email": {
            "type": "string",
            "description": "The contact email provided with the consent."
          },
          "expirationDate": {
            "type": "string",
            "description": "When the consent expires. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "fromStopPlace": {
            "type": "string",
            "description": "The stop place where the customer started its journey. Netex format",
            "example": "NSR:StopPlace:12345"
          },
          "lineRef": {
            "type": "string",
            "description": "Reference to the customers journey line. Netex format",
            "example": "VYT:Line:L1"
          },
          "originalDatedServiceJourneyId": {
            "type": "string",
            "description": "Unique Id for a specific Service Journey. Netex format with ENT as operator",
            "example": "ENT:DatedServiceJourney:12345"
          },
          "telephoneNumber": {
            "type": "string",
            "description": "The telephone number provided with the consent"
          },
          "toStopPlace": {
            "type": "string",
            "description": "The stop place where the customers ended its journey. Netex format",
            "example": "NSR:StopPlace:12345"
          }
        },
        "description": "Consents collected from customers"
      },
      "GivenConsentRequest": {
        "required": [
          "consentChoice",
          "consentId",
          "customerNumber",
          "expirationDate"
        ],
        "type": "object",
        "properties": {
          "consentChoice": {
            "type": "boolean",
            "description": "Whether this consent has been approved or rejected."
          },
          "consentId": {
            "type": "integer",
            "description": "The id of the consent defining what and to whom the customer has consented.",
            "format": "int64"
          },
          "countryCode": {
            "type": "string",
            "description": "The telephone number country code provided with the consent"
          },
          "customerNumber": {
            "type": "integer",
            "description": "Customer number. ",
            "format": "int64"
          },
          "customerRef": {
            "type": "string",
            "description": "Customer reference. Note: If you do not provide a customer ref, the customer number will used as reference."
          },
          "email": {
            "type": "string",
            "description": "The contact email provided with the consent."
          },
          "expirationDate": {
            "type": "string",
            "description": "When the consent expires. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "fromStopPlace": {
            "type": "string",
            "description": "The stop place where the customer started its journey. Netex format",
            "example": "NSR:StopPlace:12345"
          },
          "id": {
            "type": "integer",
            "description": "Unique id for GivenConsents.",
            "format": "int64"
          },
          "lineRef": {
            "type": "string",
            "description": "Reference to the customers journey line. Netex format",
            "example": "VYT:Line:L1"
          },
          "originalDatedServiceJourneyId": {
            "type": "string",
            "description": "Unique Id for a specific Service Journey. Netex format with ENT as operator",
            "example": "ENT:DatedServiceJourney:12345"
          },
          "telephoneNumber": {
            "type": "string",
            "description": "The telephone number provided with the consent"
          },
          "toStopPlace": {
            "type": "string",
            "description": "The stop place where the customers ended its journey. Netex format",
            "example": "NSR:StopPlace:12345"
          }
        }
      },
      "GivenConsentResponse": {
        "required": [
          "changedAt",
          "consentChoice",
          "consentId",
          "createdAt",
          "createdByOrgId",
          "customerNumber",
          "customerRef",
          "distributionChannel",
          "expirationDate",
          "id"
        ],
        "type": "object",
        "properties": {
          "changedAt": {
            "type": "string",
            "description": "When the consent was last changed. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "consent": { "$ref": "#/components/schemas/ConsentResponse" },
          "consentChoice": {
            "type": "boolean",
            "description": "Whether this consent has been approved or rejected."
          },
          "consentId": {
            "type": "integer",
            "description": "The id of the consent defining what and to whom the customer has consented.",
            "format": "int64"
          },
          "countryCode": {
            "type": "string",
            "description": "The telephone number country code provided with the consent"
          },
          "createdAt": {
            "type": "string",
            "description": "When the consent was given. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "createdByOrgId": {
            "type": "integer",
            "description": "Through which organisation the consent was given. Also known as 'Agent'",
            "format": "int64"
          },
          "customerNumber": {
            "type": "integer",
            "description": "Customer number. Entur number unique across organisations",
            "format": "int64"
          },
          "customerRef": {
            "type": "string",
            "description": "Customer reference. External reference, unique within an organisation"
          },
          "distributionChannel": {
            "type": "string",
            "description": "Through which distribution channel the consent was given."
          },
          "email": {
            "type": "string",
            "description": "The contact email provided with the consent."
          },
          "expirationDate": {
            "type": "string",
            "description": "When the consent expires. ISO 8601 date format",
            "format": "date-time",
            "example": "2019-04-05T14:30:30+02:00"
          },
          "fromStopPlace": {
            "type": "string",
            "description": "The stop place where the customer started its journey. Netex format",
            "example": "NSR:StopPlace:12345"
          },
          "id": {
            "type": "integer",
            "description": "Unique id for GivenConsents.",
            "format": "int64"
          },
          "lineRef": {
            "type": "string",
            "description": "Reference to the customers journey line. Netex format",
            "example": "VYT:Line:L1"
          },
          "originalDatedServiceJourneyId": {
            "type": "string",
            "description": "Unique Id for a specific Service Journey. Netex format with ENT as operator",
            "example": "ENT:DatedServiceJourney:12345"
          },
          "telephoneNumber": {
            "type": "string",
            "description": "The telephone number provided with the consent"
          },
          "toStopPlace": {
            "type": "string",
            "description": "The stop place where the customers ended its journey. Netex format",
            "example": "NSR:StopPlace:12345"
          }
        },
        "description": "Consents collected from customers"
      },
      "InternalDescriptionRequest": {
        "required": ["languageCode"],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description for the partner administrating consents. If set to null, the description for the language will be deleted"
          },
          "languageCode": {
            "type": "string",
            "description": "ISO-639-3 languageCode. 3 characters",
            "example": "ENG"
          }
        },
        "description": "Contains description for a consent. Will not be shown to a customer"
      },
      "InternalDescriptionResponse": {
        "required": ["description", "languageCode"],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "A description for the partner administrating consents"
          },
          "languageCode": {
            "type": "string",
            "description": "ISO-639-3 language code. 3 characters",
            "example": "ENG"
          }
        },
        "description": "Contains description for a consent. Will not be shown to customer"
      },
      "ClaimContractResponse": {
        "required": ["customerNumber", "success"],
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "integer",
            "description": "The customerNumber for the customer now claiming the personnel ticket",
            "format": "int64",
            "example": 1234567
          },
          "success": {
            "type": "boolean",
            "description": "Whether the claim was successful"
          }
        },
        "description": "The response after claiming a contract"
      },
      "ClaimPersonnelTicketRequest": {
        "required": ["customerNumber", "externalReference"],
        "type": "object",
        "properties": {
          "externalReference": {
            "pattern": "\\w+-(\\w+)+-\\w+",
            "type": "string",
            "description": "The code of the personnel ticket to claim",
            "example": "ABCD-EF12-3456-GH45"
          },
          "customerNumber": {
            "type": "integer",
            "description": "The customerNumber referring to the customer who claims the personnel ticket",
            "format": "int64",
            "example": 1234567
          }
        },
        "description": "A request for claiming a personnel ticket"
      },
      "EntitlementResponse": {
        "required": [
          "contractOwnerCustomerNumber",
          "contractOwnerDisplayName",
          "contractUUID",
          "contractValidFrom",
          "isSeniorCitizen",
          "productId",
          "productVersion"
        ],
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "description": "Id of the product connected to the contracts loyalty program"
          },
          "displayName": {
            "type": "array",
            "description": "Display name for loyalty program",
            "items": { "$ref": "#/components/schemas/LocalizedText" }
          },
          "productVersion": {
            "type": "string",
            "description": "Version of the product connected to the contracts loyalty program"
          },
          "contractUUID": {
            "type": "string",
            "description": "Contract UUID, used to identify a contract"
          },
          "contractExternalRef": {
            "type": "string",
            "description": "External contract reference if set."
          },
          "contractOwnerCustomerNumber": {
            "type": "integer",
            "description": "Contract owner customer number",
            "format": "int64"
          },
          "contractOwnerDisplayName": {
            "type": "string",
            "description": "Contract owners first and last name"
          },
          "contractOwnerBirthDate": {
            "$ref": "#/components/schemas/LocalDateResponse"
          },
          "contractValidFrom": {
            "type": "string",
            "description": "Contract consumable from date"
          },
          "contractValidTo": {
            "type": "string",
            "description": "Contract expiration date"
          },
          "contractParent": {
            "type": "string",
            "description": "If present, contract UUID of the parent contract. This field is usually set if the contract is created by a coupon usage, whereas this contract has a time constraint and the parent has a coupon constraint.",
            "example": "fd29908d-a2ae-4fe0-8e10-7f0db437c554"
          },
          "remainingCoupons": {
            "type": "integer",
            "description": "Remaining coupons connected to the contract",
            "format": "int64"
          },
          "couponsLimit": {
            "type": "integer",
            "description": "How many coupons the contract has. Default is cascaded from Loyalty Program Version. If set, the contract will be blocked for usage when all coupons are used. Coupons are registered via an OrderLineEvent.",
            "format": "int64",
            "example": 10
          },
          "ticketOrderId": {
            "type": "string",
            "description": "If present, a ticket is included in this right. It may be distributed or redistributed to this device."
          },
          "isSeniorCitizen": {
            "type": "boolean",
            "description": "Whether the contract owner is considered a senior citizen"
          }
        },
        "description": "Entitlement containing information about contract, product, contract holder and ticker order"
      },
      "GeneratePasswordRequest": {
        "required": ["email"],
        "type": "object",
        "properties": {
          "email": {
            "pattern": "^[a-zA-Z0-9æøåÆØÅ.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-æøåÆØÅ]{0,61}[a-zA-Z0-9æøåÆØÅ])?(?:\\.[a-zA-Z0-9æøåÆØÅ](?:[a-zA-Z0-9-æøåÆØÅ]{0,61}[a-zA-Z0-9æøåÆØÅ])?)*$",
            "type": "string",
            "description": "The email address identifying the profile",
            "example": "customer@example.com"
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation the profile belongs to. Default is tenant organisation ID. Only Internal tenants are allowed to override the organisation id",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Generate a new password for a profile identified by email and organisation id"
      },
      "LocalizedText": {
        "required": ["description", "languageCode", "text"],
        "type": "object",
        "properties": {
          "languageCode": {
            "type": "string",
            "description": "Language code according to ISO 639-3",
            "example": "NOB"
          },
          "text": {
            "type": "string",
            "description": "Text localized to the language given in languageCode"
          },
          "description": {
            "type": "string",
            "description": "Loyalty program description. Supports any kind of text"
          }
        },
        "description": "Localized text with language code"
      },
      "PurchasedLeg": {
        "required": [
          "authorityRef",
          "endTime",
          "fromStopPlaceRef",
          "id",
          "mode",
          "operatorRef",
          "serviceJourneyRef",
          "startTime",
          "toStopPlaceRef"
        ],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "datedServiceJourneyRef": { "$ref": "#/components/schemas/RefType" },
          "originalDatedServiceJourneyRef": {
            "$ref": "#/components/schemas/RefType"
          },
          "startTime": { "type": "string" },
          "fromStopPlaceRef": { "$ref": "#/components/schemas/RefType" },
          "endTime": { "type": "string" },
          "toStopPlaceRef": { "$ref": "#/components/schemas/RefType" },
          "authorityRef": { "$ref": "#/components/schemas/RefType" },
          "operatorRef": { "$ref": "#/components/schemas/RefType" },
          "serviceJourneyRef": { "$ref": "#/components/schemas/RefType" },
          "mode": { "type": "string" },
          "purchasedFareProducts": {
            "type": "array",
            "description": "Reference to Fare Products on this leg",
            "items": {
              "type": "string",
              "description": "Reference to Fare Products on this leg"
            }
          }
        },
        "description": "Legs connected to the customer on the journey"
      },
      "RefType": {
        "required": ["id"],
        "type": "object",
        "properties": {
          "id": { "type": "string" },
          "version": { "type": "string" }
        }
      },
      "TravellerInfo": {
        "required": ["customerNumber", "legs", "orderId", "organisationId"],
        "type": "object",
        "properties": {
          "customerNumber": {
            "type": "integer",
            "description": "Customer number",
            "format": "int64"
          },
          "customerRef": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "Optional customer reference"
          },
          "organisationId": {
            "type": "integer",
            "description": "The organisation the customer is registered with",
            "format": "int64"
          },
          "email": {
            "maxLength": 80,
            "minLength": 1,
            "type": "string",
            "description": "Contact email"
          },
          "telephoneNumber": {
            "maxLength": 20,
            "minLength": 1,
            "type": "string",
            "description": "Contact telephone number. Includes country code if available"
          },
          "orderId": { "type": "string", "description": "ID of Order" },
          "legs": {
            "type": "array",
            "description": "Legs connected to the customer on the journey",
            "items": { "$ref": "#/components/schemas/PurchasedLeg" }
          }
        },
        "description": "Each order on the journey enriched with customer information"
      }
    },
    "securitySchemes": {
      "jwt": { "type": "http", "scheme": "bearer", "bearerFormat": "JWT" }
    }
  }
}